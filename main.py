import telebot
import sqlite3
#import qrcode
#import cloudpayments
from telebot import types
import random
import json
import os
import base64
import requests
import datetime
from datetime import datetime, timedelta
import time

TOKEN = "8156778620:AAFHqnTDYef3-qTlvOm9HY95bHFBiYAB4HQ"
#CLOUDPAYMENTS_PUBLIC_ID = "YOUR_PUBLIC_ID"
#CLOUDPAYMENTS_SECRET = "YOUR_SECRET_KEY"
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = (2146048678, 935727305, 2107643694)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#ADMIN_ID = (935727305, 2107643694)
def connect_db():
    conn = sqlite3.connect("db.db", check_same_thread=False)
    cursor = conn.cursor()
    return conn, cursor

       

@bot.message_handler(commands=['policy'])
def policy(message):
    bot.send_message(message.chat.id, text= "1Ô∏è‚É£ <a href='https://telegra.ph/Polzovatelskoe-soglashenie-06-18-14'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>\n\n"
        "2Ô∏è‚É£ <a href='https://telegra.ph/POLITIKA-KONFIDENCIALNOSTI-06-18-8'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>\n\n"
        "3Ô∏è‚É£ <a href='https://telegra.ph/SOGLASIE-NA-OBRABOTKU-PERSONALNYH-DANNYH-06-18'>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>\n\n"
        "4Ô∏è‚É£ <a href='https://telegra.ph/OGRANICHENIE-OTVETSTVENNOSTI-DISKLEJMER-06-18'>–î–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.</a>\n\n"
        "5‚É£ <a href='https://telegra.ph/OBYAZATELSTVO-O-SOHRANENII-VRACHEBNOJ-TAJNY-06-18'>–û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í–û –û –°–û–•–†–ê–ù–ï–ù–ò–ò –í–†–ê–ß–ï–ë–ù–û–ô –¢–ê–ô–ù–´</a>\n\n"
        "6‚É£ <a href='https://telegra.ph/SOGLASIE-NA-POLUCHENIE-REKLAMNOJ-I-INFORMACIONNOJ-RASSYLKI-06-18'>–°–û–ì–õ–ê–°–ò–ï –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–ù–û–ô –ò –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ô –†–ê–°–°–´–õ–ö–ò</a>\n\n"
        "7‚É£ <a href='https://telegra.ph/SOGLASHENIE-PRI-REGISTRACII-SPECIALISTA-06-18'>–°–û–ì–õ–ê–®–ï–ù–ò–ï –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê</a>\n\n"
        "8‚É£ <a href='https://telegra.ph/PUBLICHNAYA-OFERTA-O-ZAKLYUCHENII-DOGOVORA-S-PLATFORMOJ-06-18'>–ü–£–ë–õ–ò–ß–ù–ê–Ø –û–§–ï–†–¢–ê –û –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ò –î–û–ì–û–í–û–†–ê –° –ü–õ–ê–¢–§–û–†–ú–û–ô –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–≤—Ä–∞—á–µ–π, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤)</a>\n\n"
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î–º–∏—Ç—Ä–∏–µ–≤–∏—á\n"
        "–ò–ù–ù: 773701767759\n"
        "–û–ì–†–ù–ò–ü: 325774600336521\n"
        "Email: sasha123011@gmail.com\n"
        "Telegram: @J_Milka",
            parse_mode="HTML")

@bot.message_handler(commands=['start'])
def start(message):
    if len(message.text.split()) > 1:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start, –Ω–∞–ø—Ä–∏–º–µ—Ä /start doc_123
        param = message.text.split()[1]
        if param.startswith("doc_"):
            user_id = int(param.split("_")[1])
            conn, cursor = connect_db()
            cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (user_id,))
            doctor = cursor.fetchone()
            if doctor:
                doc_card_1(message=message, call=2, doctor=doctor)
            else:
                bot.send_message(message.chat.id, "–î–æ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        return
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
    patient = cursor.fetchone()
    print('doc',doctor)
    print('pat',patient)
    print(message.from_user.id)
    if doctor:
        profile_doc(message, call=message)
    elif patient:
        profile_pat(message, call=message)
    else:
        fl = 1
        polt_sogl(message, fl)

def polt_sogl(message, fl):    
    markup = types.InlineKeyboardMarkup()
    agree_button = types.InlineKeyboardButton(text='‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data='agree_1' if fl==1 else 'agree_0')
    disagree_button = types.InlineKeyboardButton(text='‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data='disagree')
    rassilka_button = types.InlineKeyboardButton(text='‚úÖ–†–∞—Å—Å—ã–ª–∫–∏' if fl==1 else '‚ùå–†–∞—Å—Å—ã–ª–∫–∏', callback_data='rassilka_on' if fl==1 else 'rassilka_off')
    markup.add(agree_button, disagree_button, rassilka_button)
    try:
        bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=(
            "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:\n\n"
            "1Ô∏è‚É£ [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://telegra.ph/Polzovatelskoe-soglashenie-06-18-14)\n"
            "2Ô∏è‚É£ [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://telegra.ph/POLITIKA-KONFIDENCIALNOSTI-06-18-8)\n"
            "3Ô∏è‚É£ [–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://telegra.ph/SOGLASIE-NA-OBRABOTKU-PERSONALNYH-DANNYH-06-18)\n"
            "4Ô∏è‚É£ [–°–û–ì–õ–ê–°–ò–ï –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–ù–û–ô –ò –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ô –†–ê–°–°–´–õ–ö–ò](https://telegra.ph/SOGLASIE-NA-POLUCHENIE-REKLAMNOJ-I-INFORMACIONNOJ-RASSYLKI-06-18)"
            "5‚É£ [–î–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏](https://telegra.ph/OGRANICHENIE-OTVETSTVENNOSTI-DISKLEJMER-06-18).\n\n"
            "–ù–∞–∂–∏–º–∞—è \"–°–æ–≥–ª–∞—Å–µ–Ω\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è."
        ),
        reply_markup=markup,
        parse_mode="Markdown"
    )
    except telebot.apihelper.ApiTelegramException as e:
        bot.send_message(message.chat.id,text=(
            "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:\n\n"
            "1Ô∏è‚É£ [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º](https://telegra.ph/Polzovatelskoe-soglashenie-06-18-14)\n"
            "2Ô∏è‚É£ [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://telegra.ph/POLITIKA-KONFIDENCIALNOSTI-06-18-8)\n"
            "3Ô∏è‚É£ [–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://telegra.ph/SOGLASIE-NA-OBRABOTKU-PERSONALNYH-DANNYH-06-18)\n"
            "4Ô∏è‚É£ [–î–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏](https://telegra.ph/OGRANICHENIE-OTVETSTVENNOSTI-DISKLEJMER-06-18).\n\n"
            "–ù–∞–∂–∏–º–∞—è \"–°–æ–≥–ª–∞—Å–µ–Ω\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è."
        ),
        reply_markup=markup,
        parse_mode="Markdown"
    )

def start1(message,fl): 
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
    patient = cursor.fetchone()
    print('doc',doctor)
    print('pat',patient)
    print(message.from_user.id)       
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –Ø –¥–æ–∫—Ç–æ—Ä", callback_data=f"doctor_{fl}")
    pat = types.InlineKeyboardButton(text="üßë‚Äçüíº –Ø –ø–∞—Ü–∏–µ–Ω—Ç", callback_data=f"patient_{fl}")
    marcup.add(doc, pat)
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Äî –ù–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Äî –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ñ–∞–π–ª–∞–º–∏\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=marcup)
    cursor.execute('''SELECT * FROM patients''')
    patients = cursor.fetchall()
    print('patients', patients)

def reg_doc_sogl(call, fl):
    markup = types.InlineKeyboardMarkup()
    agree_button = types.InlineKeyboardButton(text='‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data=f'dagree_{fl}')
    disagree_button = types.InlineKeyboardButton(text='‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data='disagree')
    markup.add(agree_button, disagree_button)
    bot.send_message(call.message.chat.id, text="–ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –æ–∑–Ω–∞–∫–æ–º—Ç–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è –≤—Ä–∞—á–µ–π\n\n"
                    '1‚É£ [–û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í–û –û –°–û–•–†–ê–ù–ï–ù–ò–ò –í–†–ê–ß–ï–ë–ù–û–ô –¢–ê–ô–ù–´](https://telegra.ph/OBYAZATELSTVO-O-SOHRANENII-VRACHEBNOJ-TAJNY-06-18)\n'
                    '2‚É£ [–°–û–ì–õ–ê–®–ï–ù–ò–ï –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê](https://telegra.ph/SOGLASHENIE-PRI-REGISTRACII-SPECIALISTA-06-18)\n'
                    '3‚É£ [–ü–£–ë–õ–ò–ß–ù–ê–Ø –û–§–ï–†–¢–ê –û –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ò –î–û–ì–û–í–û–†–ê –° –ü–õ–ê–¢–§–û–†–ú–û–ô –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–≤—Ä–∞—á–µ–π, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤)](https://telegra.ph/PUBLICHNAYA-OFERTA-O-ZAKLYUCHENII-DOGOVORA-S-PLATFORMOJ-06-18)\n\n'
                    "–ù–∞–∂–∏–º–∞—è \"–°–æ–≥–ª–∞—Å–µ–Ω\", –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è."
        ,
        reply_markup=markup,
        parse_mode="Markdown"
                     )

user_data = {}
def doc_reg(message, user_id, fl):
    user_data[user_id] = {}
    user_data[user_id]['rassilka'] = fl
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—Å.")
    bot.register_next_step_handler(message, get_doc_name)

def get_doc_name(message):
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_doc_phone)
def get_doc_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(message, get_doc_email)
def get_doc_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id, f"üéâ –î–æ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"üë§ –ò–º—è: {user_data[message.from_user.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.from_user.id]['phone']}\n"
        f"‚úâÔ∏è Email: {user_data[message.from_user.id]['email']}\n\n"
        "‚úÖ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."
    )
    conn, cursor = connect_db()
    cursor.execute('''INSERT INTO doctors (user_id, name, phone, email, rassilka) VALUES (?, ?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email'],
        user_data[message.from_user.id]['rassilka']
    ))
    conn.commit()
    bot.send_message(message.chat.id, 
"üìÇ –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–ø–ª–æ–º–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).\n"
"üë®‚Äç‚öïÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–π–¥–∂ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω¬ª –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."  
)
    print(user_data)
    print(cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,)).fetchall())
    profile_doc(message, call=message)

def pat_reg(message, call, fl):
    bot.send_message(message.chat.id, "üßë‚Äçüíº –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ª–∏—á–Ω–æ.")
    bot.register_next_step_handler(message, get_pat_name, fl)
def get_pat_name(message, fl):
    user_data[message.from_user.id] = {}
    user_data[message.from_user.id]['rassilka'] = fl
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "‚ùóÔ∏è –ú—ã –Ω–µ –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.")
    bot.register_next_step_handler(message, get_pat_phone)
def get_pat_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(message, get_pat_email)
def get_pat_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id,  f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –ò–º—è: {user_data[message.from_user.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.from_user.id]['phone']}\n"
        f"‚úâÔ∏è Email: {user_data[message.from_user.id]['email']}\n\n"
        "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!"
    )
    con, cursor = connect_db()
    cursor.execute('''INSERT INTO patients (user_id, name, phone, email, rassilka) VALUES (?, ?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email'],
        user_data[message.from_user.id]['rassilka']
    ))
    con.commit()
    profile_pat(message, call=message)

def profile_doc(message, call):
    try:
        id = call.from_user.id
    except AttributeError:
        id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute('''SELECT verification_status, balance FROM doctors WHERE user_id = ?''', (id,))
    status_balance = cursor.fetchone()
    if not status_balance:
        bot.send_message(id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    status, balance = status_balance
    cursor.execute("""SELECT rassilka FROM doctors WHERE user_id = ?""", (id,))
    fl = cursor.fetchone()
    print('fl =', fl)
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="üìë –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="doc_verification")
    specif = types.InlineKeyboardButton(text="ü©∫ –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="doc_spec")
    chats = types.InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã", callback_data="doc_chats")
    edit = types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
    link = types.InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="doc_link")
    rass = types.InlineKeyboardButton(text= "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if fl[0]==1 else "‚úÖ–°–æ–≥–ª. –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="doc_off_rass" if fl[0]==1 else "doc_on_rass")
    

    if status == 'pending':
        marcup.add(doc, specif, edit, rass)
    elif status == 'verified':
        marcup.add(specif, chats, edit, link, rass)
    elif status == 'rejected':
        marcup.add(doc, edit, rass)

    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    specialization_str = ', '.join(specialization) if specialization else "–ù–µ –≤—ã–±—Ä–∞–Ω—ã"

    # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if doctor[8] == 'pending':
        verif_text = "‚è≥ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    elif doctor[8] == 'verified':
        verif_text = "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤!"
    elif doctor[8] == 'rejected':
        verif_text = "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    else:
        verif_text = "–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."
    profile_text = (
        "üë®‚Äç‚öïÔ∏è *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞*\n\n"
        f"üë§ –ò–º—è: {doctor[2]}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {doctor[4]}\n"
        f"‚úâÔ∏è Email: {doctor[5]}\n"
        f"üíº –°—Ç–∞—Ç—É—Å: {verif_text}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {doctor[10]} —Ä—É–±.\n"
        f"ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {specialization_str}\n"
    )
    if doctor[15]:
        profile_text = f"‚ùå–í–ê–® –ü–†–û–§–ò–õ–¨ –ó–ê–ú–û–†–û–ñ–ï–ù‚ùå\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–∞—à id:{doctor[1]}\n –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @J_Milka"
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if doctor[3]:
        try:
            with open(doctor[3], 'rb') as photo:
                bot.send_photo(id, photo, caption=profile_text, reply_markup=marcup, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ: {e}")
            bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")
    else:
        bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")

def get_doc_link(call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (call.from_user.id,))
    doctor = cursor.fetchone()
    if not doctor:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    profile_link = f"https://t.me/{bot.get_me().username}?start=doc_{doctor[1]}"
    bot.send_message(
        call.message.chat.id,
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile_link}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –≤–∞—Å."
    )

@bot.message_handler(commands=['unfreeze'])
def unfreeze_doctor(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã.")
        return
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –¥–æ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return
    try:
        doc_id = int(message.text.split()[1])
    except ValueError:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –¥–æ–∫—Ç–æ—Ä–∞.")
        return
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET is_frozen = 0, ignore_count = 0 WHERE user_id = ?''', (doc_id,))
    conn.commit()
    bot.send_message(doc_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.")
    bot.send_message(message.chat.id, "–î–æ–∫—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def doc_consultations(call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM consultations WHERE doctor_id = ? AND status = ?''', (call.from_user.id, 'pending'))
    consultations = cursor.fetchall()
    if not consultations:
        bot.send_message(
            call.message.chat.id,
            "üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
        )
        return
    marcup = types.InlineKeyboardMarkup(row_width=1)
    for consultation in consultations:
        patient_name = consultation[2]
        consult_id = consultation[0]
        button_text = f"–ó–∞–ø—Ä–æ—Å –æ—Ç {patient_name} (ID: {consult_id})"
        marcup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"consultat_{consult_id}"))
    bot.send_message(
        call.message.chat.id,
        "üìã *–ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.",
        reply_markup=marcup,
        parse_mode="Markdown"
    )
    
#–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è

def doc_verification(message, call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            "üìÇ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–ø–ª–æ–º–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).\n\n"
            "‚ùóÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–π–¥–∂ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω¬ª –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
    )
    bot.register_next_step_handler(message, get_doc_verification)

def get_doc_verification(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'verification_docs/{message.from_user.id}.jpg'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn, cursor = connect_db()
        cursor.execute(
            '''UPDATE doctors SET verification_status = ?, verification_docs = ? WHERE user_id = ?''',
            ('pending', src, message.from_user.id)
        )
        conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
            "‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤. "
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏–ª–∏ –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
        )
        bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}."
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, get_doc_verification)

def get_doc_spec(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]

    marcup = types.InlineKeyboardMarkup(row_width=3)  # <-- row_width=3 –¥–ª—è —Ç—Ä—ë—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    spec_buttons = [
        ("therapist", "–¢–µ—Ä–∞–ø–µ–≤—Ç"),
        ("family", "–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á"),
        ("pediatrician", "–ü–µ–¥–∏–∞—Ç—Ä"),
        ("cardiologist", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥"),
        ("gastroenterologist", "–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥"),
        ("endocrinologist", "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥"),
        ("neurologist", "–ù–µ–≤—Ä–æ–ª–æ–≥"),
        ("allergist_immunologist", "–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥"),
        ("dermatologist", "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥"),
        ("psychotherapist", "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç"),
        ("gynecologist", "–ì–∏–Ω–µ–∫–æ–ª–æ–≥"),
        ("ophthalmologist", "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥"),
        ("dentist", "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥"),
        ("psychiatrist", "–ü—Å–∏—Ö–∏–∞—Ç—Ä"),
    ]
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for code, label in spec_buttons:
        text = f"‚úÖ {label}" if code in specialization else label
        row.append(types.InlineKeyboardButton(text=text, callback_data=code))
        if len(row) == 3:
            marcup.add(*row)
            row = []
    if row:
        marcup.add(*row)
    done = types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")
    marcup.add(done)

    help_text = (
        "ü©∫ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≥–æ—Ç–æ–≤—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –≥–∞–ª–æ—á–∫–æ–π.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )

    try:
        bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=help_text,
        reply_markup=marcup,
        parse_mode="Markdown"
    )
    except telebot.apihelper.ApiTelegramException as e:
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "there is no text in the message to edit" in str(e):
            bot.send_message(
            call.message.chat.id,
            help_text,
            reply_markup=marcup,
            parse_mode="Markdown"
        )
        else:
            raise

def get_price(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    special = []
    for spec in specialization:
        if spec == 'therapist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–¢–µ—Ä–∞–ø–µ–≤—Ç', call.from_user.id, spec))
        elif spec == 'family':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á', call.from_user.id, spec))
        elif spec == 'pediatrician':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü–µ–¥–∏–∞—Ç—Ä', call.from_user.id, spec))
        elif spec == 'cardiologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ö–∞—Ä–¥–∏–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'gastroenterologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'endocrinologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'neurologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ù–µ–≤—Ä–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'allergist_immunologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'dermatologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'psychotherapist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç', call.from_user.id, spec))
        elif spec == 'gynecologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ì–∏–Ω–µ–∫–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'ophthalmologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'dentist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'psychiatrist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü—Å–∏—Ö–∏–∞—Ç—Ä', call.from_user.id, spec))
        conn.commit()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    print(specialization)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    specialization = [spec[0] for spec in specialization]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    specialization = ', '.join(specialization)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {specialization}", reply_markup=None)
    get_price_value(message=message)
def get_price_value(message):
    bot.send_message(
        message.chat.id,
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000,2000,3000\n"
        "–ü–æ—Ä—è–¥–æ–∫ —Ü–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π."
    )
    bot.register_next_step_handler(message, get_price_value_2)

def get_price_value_2(message):
    prices = message.text.split(',')
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (message.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    try:
        for i in range(len(specialization)):
            cursor.execute(
                '''UPDATE specialisation SET price = ? WHERE user_id = ? AND name = ?''',
                (prices[i], message.from_user.id, specialization[i])
            )
            conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
        pr = cursor.execute('''SELECT name, price FROM specialisation WHERE user_id = ?''', (message.from_user.id,)).fetchall()
        print(pr)
        profile_doc(message, call=message)
    except IndexError:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
        get_price_value(message)
    

def edit_profile(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=2)
    name = types.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="name")
    phone = types.InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="phone")
    email = types.InlineKeyboardButton(text="‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="email")
    discription = types.InlineKeyboardButton(text="‚ÑπÔ∏è –ò–∑–º./–¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="description")
    avatar = types.InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="avatar")
    marcup.add(name, phone)
    marcup.add(email, discription, avatar)
    bot.send_message(
        chat_id=call.message.chat.id,
        text=(
            "üîß *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
        ),
        reply_markup=marcup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data in ["name", "phone", "email", "description", "avatar"])
def edit_profile1(call):
    bot.answer_callback_query(call.id)
    if call.data == "name":
        bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –≤–∏–¥–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã."
        )
        bot.register_next_step_handler(call.message, get_new_name)
    elif call.data == "phone":
        bot.send_message(
            call.message.chat.id,
            "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∞–∫—Ç—É–∞–ª–µ–Ω ‚Äî –Ω–∞ –Ω–µ–≥–æ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        bot.register_next_step_handler(call.message, get_new_phone)
    elif call.data == "email":
        bot.send_message(
            call.message.chat.id,
            "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞."
        )
        bot.register_next_step_handler(call.message, get_new_email)
    elif call.data == "description":
        bot.send_message(
            call.message.chat.id,
            "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –æ–ø—ã—Ç–µ –∏ –ø–æ–¥—Ö–æ–¥–µ –∫ —Ä–∞–±–æ—Ç–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—Å."
        )
        bot.register_next_step_handler(call.message, get_new_description)
    elif call.data == "avatar":
        bot.send_message(
            call.message.chat.id,
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å."
        )
        bot.register_next_step_handler(call.message, get_new_avatar)
    

def get_new_name(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET name = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message, call=message)

def get_new_phone(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET phone = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message, call=message)

def get_new_email(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET email = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message, call=message)

def get_new_description(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET description = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message, call=message)

def get_new_avatar(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'avatars/{message.from_user.id}.jpg'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET avatar = ? WHERE user_id = ?''', (src, message.from_user.id))
        conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
        )
        profile_doc(message, call=message)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, get_new_avatar)

def profile_pat(message, call):
    conn, cursor = connect_db()
    
    try:
        id = call.from_user.id
    except AttributeError:
        id = message.from_user.id
    cursor.execute("""SELECT rassilka FROM patients WHERE user_id = ?""", (id,))
    fl = cursor.fetchone()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data="doc_reg")
    chats = types.InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã", callback_data="pat_chats")
    edit_profile = types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile_pat")
    rass = types.InlineKeyboardButton(text= "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if fl[0]==1 else "‚úÖ–°–æ–≥–ª. –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="pat_off_rass" if fl[0]==1 else "pat_on_rass")
    marcup.add(doc, chats, edit_profile)
    
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (id,))
    patient = cursor.fetchone()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤–∞—Ç–∞—Ä

    if patient:
        profile_text = (
            "üßë‚Äçüíº *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n\n"
            f"üë§ –ò–º—è: {patient[2]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient[4]}\n"
            f"‚úâÔ∏è Email: {patient[5]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        if patient[3]:
            try:
                with open(patient[3], 'rb') as photo:
                    bot.send_photo(id, photo, caption=profile_text, reply_markup=marcup, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ: {e}")
                bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")
        else:
            bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")

def edit_profile_pat(call):
    marcup = types.InlineKeyboardMarkup(row_width=2)
    name = types.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="pat_name")
    phone = types.InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="pat_phone")
    email = types.InlineKeyboardButton(text="‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="pat_email")
    avatar = types.InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data="pat_avatar")
    marcup.add(name, phone, email, avatar)
    bot.send_message(
        call.message.chat.id,
        text=(
            "üîß *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
        ),
        reply_markup=marcup,
        parse_mode="Markdown"
    )
@bot.callback_query_handler(func=lambda call: call.data in ["pat_name", "pat_phone", "pat_email", "pat_avatar"])
def edit_profile_pat1(call):
    bot.answer_callback_query(call.id)
    if call.data == "pat_name":
        bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –≤–∏–¥–µ–ª–∏ –≤—Ä–∞—á–∏."
        )
        bot.register_next_step_handler(call.message, get_new_pat_name)
    elif call.data == "pat_phone":
        bot.send_message(
            call.message.chat.id,
            "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∞–∫—Ç—É–∞–ª–µ–Ω ‚Äî –Ω–∞ –Ω–µ–≥–æ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        bot.register_next_step_handler(call.message, get_new_pat_phone)
    elif call.data == "pat_email":
        bot.send_message(
            call.message.chat.id,
            "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞."
        )
        bot.register_next_step_handler(call.message, get_new_pat_email)
    elif call.data == "pat_avatar":
        bot.send_message(
            call.message.chat.id,
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å."
        )
        bot.register_next_step_handler(call.message, get_new_pat_avatar)

def get_new_pat_name(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE patients SET name = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_pat(message, call=message)
def get_new_pat_phone(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE patients SET phone = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_pat(message, call=message)
def get_new_pat_email(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE patients SET email = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_pat(message, call=message)
def get_new_pat_avatar(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'avatars/{message.from_user.id}.jpg'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET avatar = ? WHERE user_id = ?''', (src, message.from_user.id))
        conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
        )
        profile_pat(message, call=message)
    else:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, get_new_pat_avatar)

def doc_list(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=3)
    spec1 = types.InlineKeyboardButton(text="–¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="therapist_doc")
    spec2 = types.InlineKeyboardButton(text="–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á", callback_data="family_doc")
    spec3 = types.InlineKeyboardButton(text="–ü–µ–¥–∏–∞—Ç—Ä", callback_data="pediatrician_doc")
    spec4 = types.InlineKeyboardButton(text="–ö–∞—Ä–¥–∏–æ–ª–æ–≥", callback_data="cardiologist_doc")
    spec5 = types.InlineKeyboardButton(text="–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥", callback_data="gastroenterologist_doc")
    spec6 = types.InlineKeyboardButton(text="–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥", callback_data="endocrinologist_doc")
    spec7 = types.InlineKeyboardButton(text="–ù–µ–≤—Ä–æ–ª–æ–≥", callback_data="neurologist_doc")
    spec8 = types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥", callback_data="allergist_immunologist_doc")
    spec9 = types.InlineKeyboardButton(text="–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", callback_data="dermatologist_doc")
    spec10 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="psychotherapist_doc")
    spec11 = types.InlineKeyboardButton(text="–ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="gynecologist_doc")
    spec12 = types.InlineKeyboardButton(text="–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", callback_data="ophthalmologist_doc")
    spec13 = types.InlineKeyboardButton(text="–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="dentist_doc")
    spec14 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–∏–∞—Ç—Ä", callback_data="psychiatrist_doc")
    marcup.add(spec1, spec2, spec3, spec4, spec5, spec6, spec7, spec8, spec9, spec10, spec11, spec12, spec13, spec14)
    bot.send_message(
    chat_id=call.message.chat.id,
    text=(
        "ü©∫ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. "
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    ),
    reply_markup=marcup,
    parse_mode="Markdown"
)

def get_doc(message, call, filters, flag, msg, id):
    doctor = []
    conn, cursor = connect_db()
    spec = cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,)).fetchone()
    print(spec)
    cursor.execute('''SELECT user_id FROM specialisation WHERE name = ?''', (spec))
    doctors_ids = cursor.fetchall()
    
    print(spec)
    print(doctors_ids)
    doctors_ids = [doctor[0] for doctor in doctors_ids]
    print(doctors_ids)
    cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (id,))
    filters = cursor.fetchone()
    filters= int(filters[0])
    print('filters', filters)
    if doctors_ids:
        for doctor_id in doctors_ids:
            print(doctor_id)
            cursor.execute('''SELECT * FROM doctors WHERE verification_status = 'verified' AND (is_frozen IS NULL OR is_frozen = 0)''')
            doctor += cursor.fetchall()
        print(doctor)
        doctor = sorted(doctor, key=lambda x: x[filters], reverse=True)
        print(doctor)
        print(len(doctor))
    if flag:
        doc_card(message, call, doctor, msg)
        flag = False
    else:
        doctors(message, call, doctor)

def doctors(message, call, doctor):
    conn, cursor = connect_db()
    if len(doctor) == 0:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—Ä–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.")
    else:
        marcup = types.InlineKeyboardMarkup(row_width=3)
        sort1 = types.InlineKeyboardButton(text="‚≠êÔ∏è –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="sort1")
        sort2 = types.InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="sort2")
        sort3 = types.InlineKeyboardButton(text="üéì –ü–æ –æ–ø—ã—Ç—É", callback_data="sort3")
        back = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="doc_reg")
        marcup.add(sort1, sort2, sort3)
        marcup.add(back)
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text = "üë®‚Äç‚öïÔ∏è *–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π*\n\n"
        for idx, doc in enumerate(doctor, 1):
            text += (
                f"*{idx}. {doc[2]}*\n"
                f"‚Äî üèÖ –†–µ–π—Ç–∏–Ω–≥: {doc[10]}\n"
                f"‚Äî üéì –°—Ç–∞–∂: {doc[11]} –ª–µ—Ç\n"
                f"‚Äî üí¨ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=marcup,
            parse_mode="Markdown"
        )


def doc_card(message, call, doctor, msg):
    msg = int(msg) - 1
    conn, cursor = connect_db()
    try:
        msg = int(msg) - 1
        doc_info = doctor[msg]
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä–∞—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    except TypeError:
        doc_info = doctor
    cursor.execute('''SELECT * FROM specialisation WHERE user_id = ?''', (doc_info[1],))
    specializations = cursor.fetchall()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="doc_reg")
    consult = types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"consult_{doc_info[1]}")
    marcup.add(consult, back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    spec_text = ""
    for spec in specializations:
        spec_text += f"ü©∫ {spec[3]}\nüí∞ –¶–µ–Ω–∞: {spec[4]} —Ä—É–±.\n\n"

    card_text = (
        f"üë®‚Äç‚öïÔ∏è *–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞*\n\n"
        f"üë§ –ò–º—è: {doc_info[2]}\n"
        f"üéì –°—Ç–∞–∂: {doc_info[11]} –ª–µ—Ç\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {doc_info[10]}\n"
        f"{spec_text}"
        f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤—Ä–∞—á—É."
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if doc_info[3]:
        try:
            with open(doc_info[3], 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=card_text, reply_markup=marcup, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–∞—á–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
def doc_card_1(message, call, doctor):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM specialisation WHERE user_id = ?''', (doctor[1],))
    specializations = cursor.fetchall()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    # –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    consult = types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"choose_spec_{doctor[1]}")
    back = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="doc_reg")
    marcup.add(consult, back)

    spec_text = ""
    for spec in specializations:
        spec_text += f"ü©∫ {spec[3]}\nüí∞ –¶–µ–Ω–∞: {spec[4]} —Ä—É–±.\n\n"

    card_text = (
        f"üë®‚Äç‚öïÔ∏è *–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞*\n\n"
        f"üë§ –ò–º—è: {doctor[2]}\n"
        f"üéì –°—Ç–∞–∂: {doctor[11]} –ª–µ—Ç\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {doctor[10]}\n"
        f"{spec_text}"
        f"‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
    )

    if doctor[3]:
        try:
            with open(doctor[3], 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=card_text, reply_markup=marcup, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")




def get_consultation_date(message):
    id_consult = random.randint(100000, 999999)
    marcup = types.InlineKeyboardMarkup(row_width=2)
    approve = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve{id_consult}")
    cancel = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel{id_consult}")
    marcup.add(approve, cancel)
    conn, cursor = connect_db()
    cursor.execute('''SELECT data FROM temporary_data WHERE user_id = ?''', (message.from_user.id,))
    doctor_id = cursor.fetchone()
    cursor.execute('''SELECT name FROM patients WHERE user_id = ?''', (message.from_user.id,))
    name = cursor.fetchone()
    name = name[0] if name else "–ü–∞—Ü–∏–µ–Ω—Ç"
    if doctor_id:
        doctor_id = doctor_id[0]
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doctor_id,))
        doctor = cursor.fetchone()
        if doctor:
            bot.send_message(
                message.chat.id,
                f"üìù –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –≤—Ä–∞—á—É *{doctor[2]}*.\n"
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ä–∞—á–∞. "
                
            )
            bot.send_message(
                doctor_id,
                f"üë®‚Äç‚öïÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
                f"–ü–∞—Ü–∏–µ–Ω—Ç: {message.from_user.id}\n"
                f"–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {name}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                reply_markup=marcup
            )
            total_price = cursor.execute('''SELECT price FROM specialisation WHERE user_id = ?''', (doctor_id,)).fetchone()
            total_price = total_price[0]
            cursor.execute(
                '''INSERT INTO consultations (identifier, doctor_id, patient_id, description, total_price, created_at) VALUES (?, ?, ?, ?, ?, ?)''',
                (id_consult, doctor_id, message.from_user.id, message.text, total_price, datetime.now())
            )
            conn.commit()
            cursor.execute('''DELETE FROM temporary_data WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞.")

def finish_consultation(message):
    conn, cursor = connect_db()
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if not active_chat_id:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''UPDATE consultations SET status = ?, finished_at = ? WHERE identifier = ?''',
                   ('completed', datetime.now(), active_chat_id))
    conn.commit()
    bot.send_message(message.chat.id, "–ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω. –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –≤—Ä–∞—á–∞.")

def show_followup_button(call, consultation):
    finished_at = consultation[9]  # finished_at
    followup_ping = consultation[10]  # followup_ping
    if finished_at and followup_ping == 0:
        if datetime.now() - datetime.fromisoformat(finished_at) < timedelta(days=14):
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å", callback_data=f"followup_{consultation[1]}")
            markup.add(btn)
            bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —É –ø–∞—Ü–∏–µ–Ω—Ç–∞.", reply_markup=markup)

from chat_ai import chat_with_ai

@bot.message_handler(commands=['ai'])
def ai_chat_handler(message):
    user_text = message.text.replace('/ai', '').strip()
    if not user_text:
         bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai")
         return
    messages = [
        {"role": "system", "content": "–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
        {"role": "user", "content": user_text}
    ]
    bot.send_chat_action(message.chat.id, 'typing')
    answer = chat_with_ai(messages)
    bot.send_message(message.chat.id, answer)

import requests
import base64

CLOUDPAYMENTS_PUBLIC_ID = "–í–ê–®_PUBLIC_ID"
CLOUDPAYMENTS_SECRET = "–í–ê–®_SECRET_KEY"
CLOUDPAYMENTS_API_URL = "https://api.cloudpayments.ru/"

def calculate_commission(price, has_subscription=False):
    # –ö–æ–º–∏—Å—Å–∏—è –¥–µ–ª–∏—Ç—Å—è –ø–æ–ø–æ–ª–∞–º –º–µ–∂–¥—É –≤—Ä–∞—á–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
    if has_subscription:
        percent = 0.05
        limit = 150
    else:
        percent = 0.10
        limit = 500
    commission = min(price * percent, limit)
    return commission

def create_cloudpayments_invoice(consultation_id):
    conn, cursor = connect_db()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    cursor.execute('''SELECT patient_id, doctor_id, total_price FROM consultations WHERE identifier = ?''', (consultation_id,))
    row = cursor.fetchone()
    print('row', row)
    if not row:
        return None
    patient_id, doctor_id, price = row
    print('id', patient_id)
    # –ü–æ–ª—É—á–∞–µ–º email –ø–∞—Ü–∏–µ–Ω—Ç–∞
    cursor.execute('''SELECT email FROM patients WHERE user_id = ?''', (patient_id,))
    patient_email = cursor.fetchone()
    print('patient_email', patient_email)

    # –ü–æ–ª—É—á–∞–µ–º email –≤—Ä–∞—á–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # cursor.execute('''SELECT email FROM doctors WHERE id = ?''', (doctor_id,))
    # doctor_email = cursor.fetchone()[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ subscription)
    # cursor.execute('''SELECT subscription FROM patients WHERE id = ?''', (patient_id,))
    # has_subscription = cursor.fetchone()[0] == 1
    has_subscription = False  # –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ False

    commission = calculate_commission(price, has_subscription)
    total_for_patient = price + commission / 2  # –ü–∞—Ü–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç –ø–æ–ª–æ–≤–∏–Ω—É –∫–æ–º–∏—Å—Å–∏–∏ —Å–≤–µ—Ä—Ö—É

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ CloudPayments
    url = CLOUDPAYMENTS_API_URL + "payments/charge"
    headers = {
        "Authorization": "Basic " + base64.b64encode(f"{CLOUDPAYMENTS_PUBLIC_ID}:{CLOUDPAYMENTS_SECRET}".encode()).decode()
    }
    data = {
        "Amount": total_for_patient,
        "Currency": "RUB",
        "Description": f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}",
        "InvoiceId": consultation_id,
        "AccountId": patient_email,
        "Email": patient_email
    }
    response = requests.post(url, json=data, headers=headers)
    return response.json()

def send_invoice_to_patient(consultation_id, chat_id):
    invoice = create_cloudpayments_invoice(consultation_id)
    if invoice and invoice.get("Success"):
        payment_url = invoice["Model"].get("Url", "https://pay.cloudpayments.ru/")
        bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}")
        # –í –±–∞–∑–µ: payment_status = 'pending_payment'
        conn, cursor = connect_db()
        cursor.execute('''UPDATE consultations SET payment_status = ? WHERE identifier = ?''', ('pending_payment', consultation_id))
        conn.commit()
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_chat(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (call.data.replace("approve", ""),))
    consultation = cursor.fetchone()
    if consultation:
        cursor.execute('''INSERT INTO chats (consultation_id, doctor_id, patient_id) VALUES (?, ?, ?)''', (consultation[1], consultation[3], consultation[2]))
        conn.commit()
        bot.send_message(consultation[2], "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω.")
        bot.send_message(consultation[3], "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    else:
        bot.send_message(call.message.id, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

def chats(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM chats WHERE doctor_id = ? OR patient_id = ?''', (call.from_user.id, call.from_user.id))
    chats = cursor.fetchall()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    for chat in chats:
        chat_id = chat[0]
        consultation_id = chat[1]
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (consultation_id,))
        consultation = cursor.fetchone()
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (consultation[3],))
        doctor = cursor.fetchone()
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (consultation[2],))
        patient = cursor.fetchone()
        print('chat', chat)
        print('consultation', consultation)
        print('doctor', doctor)
        print('patient', patient)
        if consultation:
            chat_button = types.InlineKeyboardButton(text=f"–ß–∞—Ç —Å {patient[2] if call.data == 'doc_chats' else doctor[2]}", callback_data=f"chat_{chat[1]}_1" if call.data == 'doc_chats' else f"chat_{chat[1]}_2")
            marcup.add(chat_button)
    back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{'back_doc'if call.data == 'doc_chats' else 'back_pat'}")
    marcup.add(back)
    print('chats', chats)
    #–≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    if len(chats) == 0:
        bot.send_message(message.chat.id, "üí¨ –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö. –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à —á–∞—Ç.")
    else:
        text = "üí¨ *–í–∞—à–∏ —á–∞—Ç—ã*\n\n"
    for chat in chats:
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (chat[1],))
        consultation = cursor.fetchone()
        if consultation:
            text += f"üóÇ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {consultation[1]}\n"
            text += f"üßë‚Äçüíº –ü–∞—Ü–∏–µ–Ω—Ç: {patient[2]}\n"
            text += f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor[2]}\n\n"
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=marcup,
            parse_mode="Markdown"
        )
    except Exception as e:
        pass

def start_chat(call, chat_id_end):
    print('chat_id_end', chat_id_end)
    marcup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    text = types.KeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    img = types.KeyboardButton(text="üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    video = types.KeyboardButton(text="üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
    audio = types.KeyboardButton(text="üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ")
    end_consult = types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    spor = types.KeyboardButton(text="‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    back = types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if chat_id_end:
        conn, cursor = connect_db()
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (call.from_user.id,))
        active_chat_id = cursor.fetchone()
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (active_chat_id[0],))
        consultation = cursor.fetchone()
        if consultation and consultation[5] == 'completed':
            show_followup_button(call, consultation)
            return
        marcup.add(text, img, video, audio, end_consult, spor, back)
    else:
        
        marcup.add(text, img, video, audio, end_consult, spor, back)
    bot.send_message(
        call.message.chat.id,
        "üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:*\n\n"
        "‚Äî üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Äî üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Äî üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\n"
        "‚Äî üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Äî ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Äî ‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ—Ä–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)\n"
        "‚Äî ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=marcup,
        parse_mode="Markdown"
    )
#–æ—Ü–µ–Ω–∫–∞ –≤—Ä–∞—á–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
def ret_pac(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (call.from_user.id,))
    patient = cursor.fetchone()
    bot.send_message(
        message.chat.id,
        "‚≠êÔ∏è *–û—Ü–µ–Ω–∏—Ç–µ –≤—Ä–∞—á–∞*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤—Ä–∞—á–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∞—Å.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5):"
    )
    bot.register_next_step_handler(message, get_rating, patient=patient)
def get_rating(message, patient):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            raise ValueError("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError as e:
        bot.send_message(message.chat.id, f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É.")
        bot.register_next_step_handler(message, get_rating, patient=patient)
        return
    
    conn, cursor = connect_db()
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (active_chat_id[0],))
    consultation = cursor.fetchone()
    cursor.execute('''SELECT rating FROM doctors WHERE user_id = ?''', (consultation[3],))
    current_rating = cursor.fetchone()
    rating = current_rating[0] if current_rating else 0
    if rating == 0:
        rating = 0
    else:
        rating = (rating + int(message.text)) / 2
    cursor.execute('''UPDATE doctors SET rating = ? WHERE user_id ''', (rating, consultation[3]))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! "
        "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∞—Å."
    )



@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup(row_width=2)
        veri = types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="doc_ver_admin")
        spor = types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", callback_data="dispute_consultation")
        rassilka = types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∏", callback_data="rassilka")
        markup.add(veri, spor, rassilka)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=markup)

def rassilka(call):
    marcup = types.InlineKeyboardMarkup(row_width=1)
    rass1 = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Å–ø. email', callback_data='rass_list')
    rass2 = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å. –≤ —Ç–≥', callback_data='rass_new')
    marcup.add(rass1, rass2)
    bot.send_message(call.message.chat.id, text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=marcup)

import pandas as pd
def rass_list(call):
    cunn, cursor = connect_db()
    email_doc = cursor.execute("""SELECT email FROM doctors WHERE rassilka = 1""").fetchall()
    print(email_doc)
    email_pac = cursor.execute("""SELECT email FROM patients WHERE rassilka = 1""").fetchall()
    data = []
    data_pac = []
    for i in email_doc:
        data += i
    for i in email_pac:
        data_pac += i
    data = [{item} for item in data]
    data_pac = [{it} for it in data_pac]
    print(data)
    df = pd.DataFrame(data)
    df.to_excel("media/email_doc.xlsx", index=False)
    
    with open('media/email_doc.xlsx', 'rb') as file:
        bot.send_document(call.message.chat.id, file)
    try:
        df = pd.DataFrame(data_pac)
        df.to_excel("media/email_pac.xlsx", index=False)
        with open('media/email_pac.xlsx', 'rb') as file:
            bot.send_document(call.message.chat.id, file)
    except ValueError:
        pass

def rass_new(call):
    bot.send_message(call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    bot.register_next_step_handler(call.message, rass_new1)
def rass_new1(message):
    conn, cursor = connect_db()
    id_doc = cursor.execute("""SELECT user_id FROM doctors WHERE rassilka = 1""").fetchall()
    id_pac = cursor.execute("""SELECT user_id FROM patients WHERE rassilka = 1""").fetchall()
    ids = id_doc + id_pac
    id_s = []
    for i in ids:
        id_s += i
    print(id_s)
    for _ in id_s:
        bot.send_message(_, text=message.text)
    bot.send_message(message.chat.id, text=f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π {len(id_s)}")


@bot.message_handler(content_types=['text', 'photo', 'video', 'audio'])
def handle_message(message):
    if message.text == "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, send_text_message)
    elif message.text == "üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, send_photo_message)
    elif message.text == "üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, send_video_message)
    elif message.text == "üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ-—Å–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, send_vocie_message)
    
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        patient = cursor.fetchone()
        if patient:
            cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
            active_chat_id = cursor.fetchone()
        else:
            cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
            active_chat_id = cursor.fetchone()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id[0],))
        chats = cursor.fetchall()
        chats = chats[0]
        print('chats', chats)
        
        if chats[2] == message.from_user.id:
            cursor.execute('''UPDATE patients SET active_chat_id = NULL WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
            print('patients', chats[2])
        elif chats[3] == message.from_user.id:
            cursor.execute('''UPDATE doctors SET active_chat_id = NULL WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
            print('doctors', chats[3])
        start(message)
    elif message.text == "‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞:")
        bot.register_next_step_handler(message, dispute_consultation)
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        conn, cursor = connect_db()
        cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        doc = 0
        if not active_chat_id:
            cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
            active_chat_id = cursor.fetchone()
            doc = 1
        if not active_chat_id:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
            return
        active_chat_id = active_chat_id[0]
        cursor.execute('''UPDATE consultations SET status = ?, finished_at = ? WHERE identifier = ?''',
                        ('completed', datetime.now(), active_chat_id))
        conn.commit()
        if doc:
            bot.send_message(message.chat.id, "–ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω. –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        else:
            bot.send_message(message.chat.id, "–ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω. –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –≤—Ä–∞—á–∞.")
            ai_audit_and_review(consultation_id=active_chat_id)
            ret_pac(message, call=message)
    if message.text.startswith('/view_chat_'):
        chat_id = message.text.replace("/view_chat_", "")
        print('view_chat_id', chat_id)
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (chat_id,))
        chats = cursor.fetchone()
        print('chat', chats)
        if chats:
            cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (chat_id,))
            row = cursor.fetchone()
            if row:
                messages = json.loads(row[0])
                print('messages', messages)
                count_messages = 0
                for messagea in messages:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                    if count_messages >= 10:
                        time.sleep(1)
                        count_messages = 0
                    count_messages += 1
                    if messagea['sender'] == 'patient':
                        if 'photo' in messagea:
                            with open(messagea['photo'], 'rb') as photo_file:
                                bot.send_photo(message.chat.id, photo=photo_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {messagea['text']}")
                        elif 'video' in messagea:
                            with open(messagea['video'], 'rb') as video_file:
                                bot.send_video(message.chat.id, video=video_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {messagea['text']}")
                        elif 'voice' in messagea:
                            with open(messagea['voice'], 'rb') as voice_file:
                                bot.send_voice(message.chat.id, voice=voice_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {messagea['text']}")
                        else:   
                            bot.send_message(message.chat.id, f"–ü–∞—Ü–∏–µ–Ω—Ç: {messagea['text']}")
                    elif messagea['sender'] == 'doctor':
                        if 'photo' in messagea:
                            with open(messagea['photo'], 'rb') as photo_file:
                                bot.send_photo(message.chat.id, photo=photo_file, caption=f"–í—Ä–∞—á: {messagea['text']}")
                        elif 'video' in messagea:
                            with open(messagea['video'], 'rb') as video_file:
                                bot.send_video(message.chat.id, video=video_file, caption=f"–í—Ä–∞—á: {messagea['text']}")
                        elif 'voice' in messagea:
                            with open(messagea['voice'], 'rb') as voice_file:
                                bot.send_voice(message.chat.id, voice=voice_file, caption=f"–í—Ä–∞—á: {messagea['text']}")
                        else:   
                            bot.send_message(message.chat.id, f"–í—Ä–∞—á: {messagea['text']}")
            else:
                bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        try:
            msg = message.text
            flag= True
            conn, cursor = connect_db()
            cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (message.from_user.id,))
            filters = cursor.fetchone()
            get_doc(message, message, filters=filters, flag=flag, msg=msg, id=message.from_user.id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
import importlib
import json



def ai_audit_and_review(consultation_id):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (consultation_id,))
    chat = cursor.fetchone()
    if not chat or not chat[4]:
        print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—É–¥–∏—Ç–∞")
        return
    messages = json.loads(chat[4])
    chat_text = ""
    for msg in messages:
        sender = "–í—Ä–∞—á" if msg.get("sender") == "doctor" else "–ü–∞—Ü–∏–µ–Ω—Ç"
        chat_text += f"{sender}: {msg.get('text','')}\n"
    ai_analis = importlib.import_module("ai_analis")
    ai_score, ai_summary = ai_analis.analyze_chat(chat_text)
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (consultation_id,))
    consult = cursor.fetchone()
    doctor_id = consult[3]
    patient_id = consult[2]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ reviews (—Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É reviews, –µ—Å–ª–∏ –Ω–µ—Ç)
    cursor.execute('''INSERT INTO reviews (doctor_id, patient_id, ai_rating, comments, consultation_id) VALUES (?, ?, ?, ?, ?)''',
                   (doctor_id, patient_id, ai_score, ai_summary, consultation_id))
    conn.commit()
    if ai_score < 3:
        bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è AI-–∞—É–¥–∏—Ç: –Ω–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ ({ai_score}) –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ {consultation_id}.\n"
            f"–†–µ–∑—é–º–µ: {ai_summary}\n"
            f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç: /view_chat_{consultation_id}"
        )

def dispute_consultation(message):
    message_text = message.text
    conn, cursor = connect_db()
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id))
    chat = cursor.fetchone()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    view_chat = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f"view_chat_{chat[1]}")
    marcup.add(view_chat)
    bot.send_message(ADMIN_ID, f"–ü–∞—Ü–∏–µ–Ω—Ç {message.from_user.id} –æ—Å–ø–æ—Ä–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–ü—Ä–∏—á–∏–Ω–∞: {message_text}\n–ß–∞—Ç: {chat[1]}", reply_markup=marcup)

def send_text_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    print('message', message.from_user.id)
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    print('row', row)
    if row[0] != None:
        messages = json.loads(row[0])
    else:
        messages = []
    
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            bot.send_message(chat[2], text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.text}')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞—á—É
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.text)
            messages.append({
                "sender": "patient",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            bot.send_message(chat[3], text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.text}')
            messages.append({
                "sender": "doctor",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            bot.send_message(chat[2], text = f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.text}')
            messages.append({
                "sender": "patient",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            bot.send_message(chat[3], text = f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.text}')
            messages.append({
                "sender": "doctor",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_photo_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[2], photo=message.photo[-1].file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.photo[-1].file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[3], photo=message.photo[-1].file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[2], photo=message.photo[-1].file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[3], photo=message.photo[-1].file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_video_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[2], video=message.video.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.video.file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[3], video=message.video.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[2], video=message.video.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[3], video=message.video.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_vocie_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    print('row', row)
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[2], voice=message.voice.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.voice.file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[3], voice=message.voice.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[2], voice=message.voice.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[3], voice=message.voice.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")



def doc_ver_admin(call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE verification_status = ?''', ('pending',))
    data = cursor.fetchall()
    if not data:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
        return
    for row in data:
        print('row', row)
        markup = types.InlineKeyboardMarkup(row_width=2)
        check = types.InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {row[2]}", callback_data=f"check_{row[1]}")
        markup.add(check)
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_"))
def check_doc(call):
    conn, cursor = connect_db()
    doc_id = call.data.split("_")[1]
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
    data = cursor.fetchone()
    if not data:
        bot.send_message(call.message.chat.id, "–î–æ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    approve = types.InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"accept_{doc_id}")
    reject = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{doc_id}")
    markup.add(approve, reject)
    with open(data[7], 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo=photo, caption=f"–î–æ–∫—Ç–æ—Ä: {data[2]}", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("followup_"))
def followup_request(call):
    consultation_id = call.data.replace("followup_", "")
    print('consultation_id', consultation_id)
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (consultation_id,))
    consultation = cursor.fetchone()
    if not consultation:
        bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–∏–Ω–≥
    if consultation[10]:  # followup_ping
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return
    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
    cursor.execute('''UPDATE consultations SET followup_ping = 1 WHERE identifier = ?''', (consultation_id,))
    conn.commit()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç—É
    patient_id = consultation[2]
    doctor_id = consultation[3]
    cursor.execute('''SELECT name FROM doctors WHERE user_id = ?''', (doctor_id,))
    doc_name = cursor.fetchone()[0]
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üü¢ –õ—É—á—à–µ", callback_data=f"1followup_status_{consultation_id}_good"),
        types.InlineKeyboardButton("üü° –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data=f"1followup_status_{consultation_id}_neutral"),
        types.InlineKeyboardButton("üî¥ –•—É–∂–µ", callback_data=f"1followup_status_{consultation_id}_bad"),
    )
    bot.send_message(
        patient_id,
        f"–î–æ–∫—Ç–æ—Ä {doc_name} –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=markup
    )
    bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç—É.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("1followup_status_"))
def followup_status(call):
    parts = call.data.split("_")
    consultation_id = parts[2]
    status = parts[3]
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (consultation_id,))
    consultation = cursor.fetchone()
    doctor_id = consultation[3]
    patient_id = consultation[2]
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ followup_status –≤ consultations, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        cursor.execute('''ALTER TABLE consultations ADD COLUMN followup_status TEXT''')
        conn.commit()
    except Exception:
        pass  # –ø–æ–ª–µ —É–∂–µ –µ—Å—Ç—å
    cursor.execute('''UPDATE consultations SET followup_status = ? WHERE identifier = ?''', (status, consultation_id))
    conn.commit()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ä–∞—á–∞
    status_text = {"good": "üü¢ –õ—É—á—à–µ", "neutral": "üü° –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "bad": "üî¥ –•—É–∂–µ"}[status]
    bot.send_message(doctor_id, f"–ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å: {status_text}")
    # –ï—Å–ª–∏ "—Ö—É–∂–µ" ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    if status == "bad":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="doc_reg"))
        bot.send_message(
            patient_id,
            "‚ùóÔ∏è –ï—Å–ª–∏ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —É—Ö—É–¥—à–∏–ª–æ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É.",
            reply_markup=markup
        )
    else:
        bot.send_message(patient_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É —Å–Ω–æ–≤–∞.")

import threading

def auto_refund_job():
    while True:
        conn, cursor = connect_db()
        now = datetime.now()
        cursor.execute('''SELECT * FROM consultations WHERE status = ?''', ('pending',))
        consultations = cursor.fetchall()
        for consult in consultations:
            created_at = datetime.fromisoformat(consult[8])  # consult[8] = created_at
            if (now - created_at) > timedelta(hours=24):
                # –í–æ–∑–≤—Ä–∞—Ç: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, —É–≤–µ–¥–æ–º–ª—è–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
                cursor.execute('''UPDATE consultations SET status = ? WHERE identifier = ?''', ('refunded', consult[1]))
                conn.commit()
                bot.send_message(consult[2], "‚è≥ –í—Ä–∞—á –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞.")
                bot.send_message(consult[3], "‚ùóÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∑–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫.")
                cursor.execute('''UPDATE doctors SET ignore_count = COALESCE(ignore_count, 0) + 1 WHERE user_id = ?''', (consult[3],))
                cursor.execute('''SELECT ignore_count FROM doctors WHERE user_id = ?''', (consult[3],))
                ignore_count = cursor.fetchone()[0]
                if ignore_count >= 4:
                    cursor.execute('''UPDATE doctors SET is_frozen = 1 WHERE user_id = ?''', (consult[3],))
                    bot.send_message(consult[3], "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏–∑-–∑–∞ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
                conn.commit()
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å


# –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ:
threading.Thread(target=auto_refund_job, daemon=True).start()

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    conn, cursor = connect_db()
    id_consult = cursor.execute('''SELECT identifier FROM consultations WHERE doctor_id = ?''', (call.from_user.id,)).fetchall()
    print('id', id_consult)
    print(call.from_user.id)
    bot.answer_callback_query(call.id)
    if call.data.startswith("doctor_"):
        reg_doc_sogl(call, fl=int(call.data.replace("doctor_","")))
    elif call.data.startswith('dagree_'):
        doc_reg(message=call.message, user_id=call.from_user.id, fl=int(call.data.replace("dagree_","")))
    elif call.data.startswith("patient_"):
        pat_reg(message=call.message, call=call, fl=int(call.data.replace("patient_","")))
    elif call.data == "doc_verification":
        print(1)
        doc_verification(message=call.message, call=call)
    elif call.data == "doc_spec":
        print(2)
        get_doc_spec(message=call.message, call=call)
    elif call.data in ["therapist", "family", "pediatrician", "cardiologist", "gastroenterologist",
                     "endocrinologist", "neurologist", "allergist_immunologist", "dermatologist",
                     "psychotherapist", "gynecologist", "ophthalmologist", "dentist", "psychiatrist"]:
        conn, cursor = connect_db()
        cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchall()
        specialization = [spec[0] for spec in specialization]
        if call.data in specialization:
            cursor.execute('''DELETE FROM specialisation WHERE user_id = ? AND name = ?''', (call.from_user.id, call.data))
            conn.commit()
        else:
            cursor.execute('''INSERT INTO specialisation (user_id, name, price) VALUES (?, ?, ?)''', (call.from_user.id, call.data, 0))
            conn.commit()
        get_doc_spec(message=call.message, call=call)
    elif call.data == "done":
        get_price(message=call.message, call=call)
    elif call.data == "edit_profile":
        edit_profile(message=call.message, call=call)
    elif call.data == "doc_reg":
        doc_list(message=call.message, call=call)
    elif call.data in ["therapist_doc", "family_doc", "pediatrician_doc", "cardiologist_doc", "gastroenterologist_doc",
                     "endocrinologist_doc", "neurologist_doc", "allergist_immunologist_doc", "dermatologist_doc",
                     "psychotherapist_doc", "gynecologist_doc", "ophthalmologist_doc", "dentist_doc", "psychiatrist_doc"]:
        spec = call.data.replace("_doc", "")
        print(spec)
        conn, cursor = connect_db()
        cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchone() 
        print('spec1',specialization)  
        conn.commit()
        cursor.execute('''UPDATE patients SET spec = ? WHERE user_id = ?''', (spec, call.from_user.id))
        conn.commit()
        filters = 10
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort1":
        filters = 10
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort2":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort3":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data.startswith("consult_"):
        parts = call.data.split("_")
        if len(parts) == 3:
            doctor_id = int(parts[1])
            spec_id = int(parts[2])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            conn, cursor = connect_db()
            cursor.execute('''INSERT OR REPLACE INTO temporary_data (user_id, data, spec_id) VALUES (?, ?, ?)''', (call.from_user.id, doctor_id, spec_id))
            conn.commit()
            bot.send_message(
                call.message.chat.id,
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á—É –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ë–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å –≤ –≥–æ—Ä–ª–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ 3 –¥–Ω—è...¬ª"
            )
            bot.register_next_step_handler(call.message, get_consultation_date)
        else:
            id = call.data.replace("consult_", "")
            conn, cursor = connect_db()
            cursor.execute('''INSERT INTO temporary_data (user_id, data) VALUES (?, ?)''', (call.from_user.id, id))
            conn.commit()
            bot.send_message(
                call.message.chat.id,
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á—É –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ë–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å –≤ –≥–æ—Ä–ª–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ 3 –¥–Ω—è...¬ª"
            )
            bot.register_next_step_handler(call.message, get_consultation_date)
    elif call.data.startswith("approve"):
        id_consult = call.data.replace("approve", "")
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (id_consult,))
        consultation = cursor.fetchone()
        if consultation:
            #–Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã.
            bot.send_message(
        consultation[3],
    "‚úÖ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è."
)
            bot.send_message(
    consultation[2],
    "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤—Ä–∞—á–æ–º!\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –≤—Ä–∞—á–æ–º."
)
            #send_invoice_to_patient(id_consult, call.message.chat.id)
            create_chat(message=call.message, call=call)
        else:
            bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif call.data.startswith("cancel"):
        id_consult = call.data.replace("cancel", "")
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (id_consult,))
        consultation = cursor.fetchone()
        if consultation:
            bot.send_message(
                consultation[3],
                "‚ùå –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
)
            bot.send_message(
                consultation[2],
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
)
        else:
            bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif call.data.startswith("accept"):
        id = call.data.replace("accept_", "")
        print('id=', id)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET verification_status = ? WHERE user_id = ?''', ('verified', id))
        conn.commit()
        bot.send_message(
    id,
    "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞."
)
        bot.send_message(
    call.message.chat.id,
    "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
    "–î–æ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."
)
        
    elif call.data.startswith("reject"):
        id = call.data.replace("reject_", "")
        print('id=', id)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET verification_status = ? WHERE user_id = ?''', ('rejected', id))
        conn.commit()
        bot.send_message(
    id,
    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞.\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)
        bot.send_message(
    call.message.chat.id,
    "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
    "–î–æ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."
)
    elif call.data == "doc_chats":
        print('doc_chats')
        chats(message=call.message, call=call)
    elif call.data == "pat_chats":
        chats(message=call.message, call=call)
    elif call.data == "back_doc" or call.data == "back_pat":
        if call.data == "back_doc":
            profile_doc(message=call.message, call=call)
        else:
            profile_pat(message=call.message, call=call)
    elif call.data.startswith("chat_"):
        chat_id = call.data.replace("chat_", "")
        print('chat_id', chat_id)
        chat_id_end = chat_id.endswith('_1')
        print('chat_id_end', chat_id_end)
        #—É–±–∏—Ä–∞–µ–º "_1" –∏–ª–∏ "_2" –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id.endswith("_1") or chat_id.endswith("_2"):
            chat_id = chat_id[:-2]
        print('chat_id', chat_id)
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        if chat:
            cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (chat[1],))
            consultation = cursor.fetchone()
            if consultation:
                cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (consultation[3],))
                doctor = cursor.fetchone()
                cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (consultation[2],))
                patient = cursor.fetchone()
                bot.send_message(call.message.chat.id, f"–ß–∞—Ç —Å {doctor[2] if call.data == 'doc_chats' else patient[2]}")
                print('chat_id.end', chat_id.endswith('_1'))
                if chat_id_end:
                    cursor.execute('''UPDATE doctors SET active_chat_id = ? WHERE user_id = ?''', (chat_id, consultation[3]))
                    conn.commit()
                else:
                    cursor.execute('''UPDATE patients SET active_chat_id = ? WHERE user_id = ?''', (chat_id, consultation[2]))
                    conn.commit()
                bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                start_chat(call, chat_id_end)
            else:
                bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            bot.send_message(call.message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    elif call.data.startswith("view_chat_"):
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ call.data
        if call.data.startswith("view_chat_"):
            chat_id = call.data.replace("view_chat_", "")
            print('view_chat_id', chat_id)
        else:
            chat_id = message.text.replace("view_chat_", "")
            print('view_chat_id', chat_id)
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        if chat:
            cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (chat_id,))
            row = cursor.fetchone()
            if row:
                messages = json.loads(row[0])
                print('messages', messages)
                count_messages = 0
                for message in messages:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                    if count_messages >= 10:
                        time.sleep(1)
                        count_messages = 0
                    count_messages += 1
                    if message['sender'] == 'patient':
                        if 'photo' in message:
                            with open(message['photo'], 'rb') as photo_file:
                                bot.send_photo(call.message.chat.id, photo=photo_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        elif 'video' in message:
                            with open(message['video'], 'rb') as video_file:
                                bot.send_video(call.message.chat.id, video=video_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        elif 'voice' in message:
                            with open(message['voice'], 'rb') as voice_file:
                                bot.send_voice(call.message.chat.id, voice=voice_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        else:   
                            bot.send_message(call.message.chat.id, f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                    elif message['sender'] == 'doctor':
                        if 'photo' in message:
                            with open(message['photo'], 'rb') as photo_file:
                                bot.send_photo(call.message.chat.id, photo=photo_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        elif 'video' in message:
                            with open(message['video'], 'rb') as video_file:
                                bot.send_video(call.message.chat.id, video=video_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        elif 'voice' in message:
                            with open(message['voice'], 'rb') as voice_file:
                                bot.send_voice(call.message.chat.id, voice=voice_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        else:   
                            bot.send_message(call.message.chat.id, f"–í—Ä–∞—á: {message['text']}")
            else:
                bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif call.data == 'doc_ver_admin':
        doc_ver_admin(call)
    elif call.data == "edit_profile_pat":
        edit_profile_pat(call=call)
    elif call.data == "doc_consultations":
        doc_consultations(call=call)
    elif call.data == 'doc_link':
        get_doc_link(call=call)
    elif call.data.startswith("choose_spec_"):
        doctor_id = int(call.data.replace("choose_spec_", ""))
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM specialisation WHERE user_id = ?''', (doctor_id,))
        specs = cursor.fetchall()
        if not specs:
            bot.send_message(call.message.chat.id, "–£ –≤—Ä–∞—á–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return
        marcup = types.InlineKeyboardMarkup(row_width=1)
        for spec in specs:
            # spec[0] ‚Äî id —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, spec[3] ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ
            marcup.add(types.InlineKeyboardButton(
                text=f"{spec[3]} ‚Äî {spec[4]} —Ä—É–±.",
                callback_data=f"consult_{doctor_id}_{spec[0]}"
            ))
        marcup.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"doc_card_{doctor_id}"))
        bot.send_message(
            chat_id=call.message.chat.id,
            text="ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
            reply_markup=marcup
        )
    elif call.data == "rassilka_on":
        fl = 0
        polt_sogl(message=call.message, fl=fl)
    elif call.data == "rassilka_off":
        fl = 1
        polt_sogl(message=call.message, fl=fl)
    elif call.data.startswith('agree_'):
        start1(message=call.message, fl=int(call.data.replace("agree_","")))
    elif call.data == "disagree":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—Å–ª–æ–≤–∏–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
    elif call.data == 'rassilka':
        rassilka(call)
    elif call.data == 'rass_list':
        rass_list(call)
    elif call.data == 'rass_new':
        rass_new(call)
    elif call.data == 'doc_off_rass':
        cursor.execute("""UPDATE doctors SET rassilka = ? WHERE user_id = ?""", (0, call.from_user.id))
        conn.commit()
        profile_doc(call.message, call)
    elif call.data == 'doc_on_rass':
        cursor.execute("""UPDATE doctors SET rassilka = ? WHERE user_id = ?""", (1, call.from_user.id))
        conn.commit()
        profile_doc(call.message, call)
    elif call.data == 'pat_off_rass':
        cursor.execute("""UPDATE patients SET rassilka = ? WHERE user_id = ?""", (0, call.from_user.id))
        conn.commit()
        profile_doc(call.message, call)
    elif call.data == 'pat_on_rass':
        cursor.execute("""UPDATE patients SET rassilka = ? WHERE user_id = ?""", (1, call.from_user.id))
        conn.commit()
        profile_doc(call.message, call)


bot.polling(none_stop=True)