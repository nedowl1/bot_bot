import telebot
import sqlite3
#import qrcode
#import cloudpayments
from telebot import types

TOKEN = "8156778620:AAGDqv6M3xzOH75owFRtTGU59EPaz_Mz0II"
#CLOUDPAYMENTS_PUBLIC_ID = "YOUR_PUBLIC_ID"
#CLOUDPAYMENTS_SECRET = "YOUR_SECRET_KEY"
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 2146048678  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#ADMIN_ID = (935727305, 2107643694)
def connect_db():
    conn = sqlite3.connect("db.db", check_same_thread=False)
    cursor = conn.cursor()
    return conn, cursor


@bot.message_handler(commands=['start'])
def start(message):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
    patient = cursor.fetchone()
    print(doctor)
    print(message.from_user.id)
    if doctor:
        profile_doc(message)
    elif patient:
        profile_pat(message)
    else:
        marcup = types.InlineKeyboardMarkup(row_width=2)
        doc = types.InlineKeyboardButton(text="–î–æ–∫—Ç–æ—Ä", callback_data="doctor")
        pat = types.InlineKeyboardButton(text="–ü–∞—Ü–∏–µ–Ω—Ç", callback_data="patient")
        marcup.add(doc, pat)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=marcup)


user_data = {}
def doc_reg(message, user_id):
    user_data[user_id] = {}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, get_doc_name)

def get_doc_name(message):
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_doc_phone)
def get_doc_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email:")
    bot.register_next_step_handler(message, get_doc_email)
def get_doc_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id, "–î–æ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                     "–ò–º—è: {}\n"
                     "–¢–µ–ª–µ—Ñ–æ–Ω: {}\n"
                     "Email: {}".format(
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    conn, cursor = connect_db()
    cursor.execute('''INSERT INTO doctors (user_id, name, phone, email) VALUES (?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    conn.commit()
    bot.send_message(message.chat.id, """
üìÇ –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.  
üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.  
üë®‚Äç‚öïÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–π–¥–∂ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω¬ª.  
""")
    print(user_data)
    print(cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,)).fetchall())
    profile_doc(message)

def pat_reg(message, call):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, get_pat_name)
def get_pat_name(message):
    user_data[message.from_user.id] = {}
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_pat_phone)
def get_pat_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email:")
    bot.register_next_step_handler(message, get_pat_email)
def get_pat_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id, "–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                     "–ò–º—è: {}\n"
                     "–¢–µ–ª–µ—Ñ–æ–Ω: {}\n"
                     "Email: {}".format(
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    con, cursor = connect_db()
    cursor.execute('''INSERT INTO patients (user_id, name, phone, email) VALUES (?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    con.commit()

def profile_doc(message):
    conn, cursor = connect_db()
    cursor.execute('''SELECT verification_status, balance FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="doc_verification")
    specif = types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="doc_spec")
    chats = types.InlineKeyboardButton(text="–ß–∞—Ç—ã", callback_data="doc_chats")
    edit = types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
    status = cursor.fetchone()[0]
    print(status)
    if status == 'pending':
        marcup.add(doc, specif, edit)
    elif status == 'verified':
        marcup.add(specif, chats, edit)
    
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (message.from_user.id,))
    specialization = cursor.fetchone()
    
    if specialization:
        special_str = ','.join(specialization)
        specialization = special_str
    else:
        specialization = "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
    if doctor:
        bot.send_message(message.chat.id, text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                         "–ò–º—è: {}\n"
                         "–¢–µ–ª–µ—Ñ–æ–Ω: {}\n"
                         "Email: {}\n"
                         "–°—Ç–∞—Ç—É—Å: {}\n"
                         "–ë–∞–ª–∞–Ω—Å: {}\n"
                         "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {}".format(
            doctor[2], doctor[4], doctor[5], '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' if doctor[6] == 'verified' else '‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', doctor[10], specialization),
                          reply_markup=marcup)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

#–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è

def doc_verification(message, call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    bot.register_next_step_handler(message, get_doc_verification)
def get_doc_verification(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = 'verification_docs/' + str(message.from_user.id) + '.jpg'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET verification_status = ? WHERE user_id = ?''', ('pending', message.from_user.id))
        cursor.execute('''UPDATE doctors SET verification_docs = ? WHERE user_id = ?''', (src, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, text="–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é {message.from_user.id}.")
    #else:
       # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")


def get_doc_spec(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    print(specialization)
    specialization = [spec[0] for spec in specialization]
    print(specialization)
    marcup = types.InlineKeyboardMarkup(row_width=3)
    spec1 = types.InlineKeyboardButton(text="‚úÖ –¢–µ—Ä–∞–ø–µ–≤—Ç" if "therapist" in specialization else "–¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="therapist")
    spec2 = types.InlineKeyboardButton(text="‚úÖ –°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á" if "family_doctor" in specialization else "–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á", callback_data="family_doctor")
    spec3 = types.InlineKeyboardButton(text="‚úÖ –ü–µ–¥–∏–∞—Ç—Ä" if "pediatrician" in specialization else "–ü–µ–¥–∏–∞—Ç—Ä", callback_data="pediatrician")
    spec4 = types.InlineKeyboardButton(text="‚úÖ –ö–∞—Ä–¥–∏–æ–ª–æ–≥" if "cardiologist" in specialization else "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", callback_data="cardiologist")
    spec5 = types.InlineKeyboardButton(text="‚úÖ –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥" if "gastroenterologist" in specialization else "–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥", callback_data="gastroenterologist")
    spec6 = types.InlineKeyboardButton(text="‚úÖ –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥" if "endocrinologist" in specialization else "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥", callback_data="endocrinologist")
    spec7 = types.InlineKeyboardButton(text="‚úÖ –ù–µ–≤—Ä–æ–ª–æ–≥" if "neurologist" in specialization else "–ù–µ–≤—Ä–æ–ª–æ–≥", callback_data="neurologist")
    spec8 = types.InlineKeyboardButton(text="‚úÖ –ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥" if "allergist_immunologist" in specialization else "–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥", callback_data="allergist_immunologist")
    spec9 = types.InlineKeyboardButton(text="‚úÖ –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥" if "dermatologist" in specialization else "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", callback_data="dermatologist")
    spec10 = types.InlineKeyboardButton(text="‚úÖ –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç" if "psychotherapist" in specialization else "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="psychotherapist")
    spec11 = types.InlineKeyboardButton(text="‚úÖ –ì–∏–Ω–µ–∫–æ–ª–æ–≥" if "gynecologist" in specialization else "–ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="gynecologist")
    spec12 = types.InlineKeyboardButton(text="‚úÖ –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥" if "ophthalmologist" in specialization else "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", callback_data="ophthalmologist")
    spec13 = types.InlineKeyboardButton(text="‚úÖ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥" if "dentist" in specialization else "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="dentist")
    spec14 = types.InlineKeyboardButton(text="‚úÖ –ü—Å–∏—Ö–∏–∞—Ç—Ä" if "psychiatrist" in specialization else "–ü—Å–∏—Ö–∏–∞—Ç—Ä", callback_data="psychiatrist")
    done = types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")
    marcup.add(spec1, spec2, spec3, spec4, spec5, spec6, spec7, spec8, spec9, spec10, spec11, spec12, spec13, spec14, done)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:"
    current_markup = call.message.reply_markup

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if current_text != call.message.text or str(current_markup) != str(marcup.to_dict()):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=current_text, reply_markup=marcup)


def get_price(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    special = []
    for spec in specialization:
        if spec == 'therapist':
            special += [' –¢–µ—Ä–∞–ø–µ–≤—Ç']
        elif spec == 'family_doctor':
            special += [' –°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á']
        elif spec == 'pediatrician':
            special += [' –ü–µ–¥–∏–∞—Ç—Ä']
        elif spec == 'cardiologist':
            special += [' –ö–∞—Ä–¥–∏–æ–ª–æ–≥']
        elif spec == 'gastroenterologist':
            special += [' –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥']
        elif spec == 'endocrinologist':
            special += [' –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥']
        elif spec == 'neurologist':
            special += [' –ù–µ–≤—Ä–æ–ª–æ–≥']
        elif spec == 'allergist_immunologist':
            special += [' –ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥']
        elif spec == 'dermatologist':
            special += [' –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥']
        elif spec == 'psychotherapist':
            special += [' –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç']
        elif spec == 'gynecologist':
            special += [' –ì–∏–Ω–µ–∫–æ–ª–æ–≥']
        elif spec == 'ophthalmologist':
            special += [' –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥']
        elif spec == 'dentist':
            special += [' –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥']
        elif spec == 'psychiatrist':
            special += [' –ü—Å–∏—Ö–∏–∞—Ç—Ä']
    print(special)
    special = list(set(special))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    special_str = ','.join(special)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
    cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ?''', (special_str, call.from_user.id))
    conn.commit()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchone()
    if specialization:
        specialization = specialization[0].split(',')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
    print(specialization)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {special_str}", reply_markup=None)
    get_price_value(message=message)
def get_price_value(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000,2000,3000):")
    bot.register_next_step_handler(message, get_price_value_2)
def get_price_value_2(message):
    prices = message.text.split(',')
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (message.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    print(specialization)
    for i in range(len(specialization)):
        cursor.execute('''UPDATE specialisation SET price = ? WHERE user_id = ? AND name = ?''', (prices[i], message.from_user.id, specialization[i]))
        conn.commit()
    bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    pr = cursor.execute('''SELECT name, price FROM specialisation WHERE user_id = ?''', (message.from_user.id,)).fetchall()
    print(pr)
    profile_doc(message)

def edit_profile(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=2)
    name = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="name")
    phone = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="phone")
    email = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="email")
    discription = types.InlineKeyboardButton(text="–ò–∑–º.\–¥–æ–±. –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="description")
    marcup.add(name, phone, email, discription)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=marcup)

@bot.callback_query_handler(func=lambda call: call.data in ["name", "phone", "email", "description"])
def edit_profile1(call):
    bot.answer_callback_query(call.id)
    if call.data == "name":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler(call.message, get_new_name)
    elif call.data == "phone":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(call.message, get_new_phone)
    elif call.data == "email":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        bot.register_next_step_handler(call.message, get_new_email)
    elif call.data == "description":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        bot.register_next_step_handler(call.message, get_new_description)
def get_new_name(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET name = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, "–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    profile_doc(message)
def get_new_phone(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET phone = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    profile_doc(message)
def get_new_email(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET email = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, "Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    profile_doc(message)
def get_new_description(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET description = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    profile_doc(message)

def profile_pat(message):
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data="doc_reg")
    chats = types.InlineKeyboardButton(text="–ß–∞—Ç—ã", callback_data="pat_chats")
    marcup.add(doc, chats)
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
    patient = cursor.fetchone()
    if patient:
        bot.send_message(message.chat.id, text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                         "–ò–º—è: {}\n"
                         "–¢–µ–ª–µ—Ñ–æ–Ω: {}\n"
                         "Email: {}".format(
            patient[2], patient[4], patient[5]),
        reply_markup=marcup)

def doc_list(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=3)
    spec1 = types.InlineKeyboardButton(text="–¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="therapist_doc")
    spec2 = types.InlineKeyboardButton(text="–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á", callback_data="family_doctor_doc")
    spec3 = types.InlineKeyboardButton(text="–ü–µ–¥–∏–∞—Ç—Ä", callback_data="pediatrician_doc")
    spec4 = types.InlineKeyboardButton(text="–ö–∞—Ä–¥–∏–æ–ª–æ–≥", callback_data="cardiologist_doc")
    spec5 = types.InlineKeyboardButton(text="–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥", callback_data="gastroenterologist_doc")
    spec6 = types.InlineKeyboardButton(text="–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥", callback_data="endocrinologist_doc")
    spec7 = types.InlineKeyboardButton(text="–ù–µ–≤—Ä–æ–ª–æ–≥", callback_data="neurologist_doc")
    spec8 = types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥", callback_data="allergist_immunologist_doc")
    spec9 = types.InlineKeyboardButton(text="–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", callback_data="dermatologist_doc")
    spec10 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="psychotherapist_doc")
    spec11 = types.InlineKeyboardButton(text="–ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="gynecologist_doc")
    spec12 = types.InlineKeyboardButton(text="–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", callback_data="ophthalmologist_doc")
    spec13 = types.InlineKeyboardButton(text="–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="dentist_doc")
    spec14 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–∏–∞—Ç—Ä", callback_data="psychiatrist_doc")
    marcup.add(spec1, spec2, spec3, spec4, spec5, spec6, spec7, spec8, spec9, spec10, spec11, spec12, spec13, spec14)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–æ–≤–ª–µ–Ω–∏–µ:", reply_markup=marcup)

def get_doc(message, call, filters, flag, msg, id):
    doctor = []
    conn, cursor = connect_db()
    spec = cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,)).fetchone()
    print(spec)
    cursor.execute('''SELECT user_id FROM specialisation WHERE name = ?''', (spec))
    doctors_ids = cursor.fetchall()
    
    print(spec)
    print(doctors_ids)
    doctors_ids = [doctor[0] for doctor in doctors_ids]
    print(doctors_ids)
    cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (id,))
    filters = cursor.fetchone()
    filters= int(filters[0])
    print('filters', filters)
    if doctors_ids:
        for doctor_id in doctors_ids:
            print(doctor_id)
            cursor.execute('''SELECT * FROM doctors WHERE user_id = ? AND verification_status = ?''', (doctor_id, 'verified'))
            doctor += cursor.fetchall()
        print(doctor)
        doctor = sorted(doctor, key=lambda x: x[filters], reverse=True)
        print(doctor)
        print(len(doctor))
    if flag:
        doc_card(message, call, doctor, msg)
        flag = False
    else:
        doctors(message, call, doctor)

def doctors(message, call, doctor):
    conn, cursor = connect_db()
    if len(doctor) == 0:
        bot.send_message(message.chat.id, "–í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        marcup = types.InlineKeyboardMarkup(row_width=3)
        sort1 = types.InlineKeyboardButton(text="–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="sort1")
        sort2 = types.InlineKeyboardButton(text="–ü–æ —Ü–µ–Ω–µ", callback_data="sort2")
        sort3 = types.InlineKeyboardButton(text="–ü–æ –æ–ø—ã—Ç—É", callback_data="sort3")
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="doc_reg")
        marcup.add(sort1, sort2, sort3, back)
        #—Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text = "–í—Ä–∞—á–∏:\n"
        t = 1
        for doc in doctor:
            text += f"{t}. –ò–º—è: {doc[2]}\n–°—Ç–∞–∂: {doc[11]}\n–†–µ–π—Ç–∏–Ω–≥: {doc[10]}\n\n"
            t += 1
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=marcup)
            
@bot.message_handler(content_types=['text'])
def handle_text(message):
    msg = message.text
    flag= True
    conn, cursor = connect_db()
    cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (message.from_user.id,))
    filters = cursor.fetchone()
    get_doc(message, message, filters=filters, flag=flag, msg=msg, id=message.from_user.id)

def doc_card(message, call, doctor, msg):
    msg = int(msg) - 1
    print(doctor[msg])
    doctors = doctor[msg][3]
    print('doc', doctors)  
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM specialisation WHERE user_id = ?''', (doctor[msg][1],))
    specialization = cursor.fetchall()
    print('spec', specialization)
    specialization_coun = int(len(specialization))
    print('spec1', specialization_coun)
    if doctors != 'None':
        print(doctor[msg][3])
        with open(doctor[msg][3], 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=f"–ò–º—è: {doctor[msg][2]}\n"
                                                           f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {doctor[msg][7]}\n"
                                                           f"–°—Ç–∞–∂: {doctor[msg][11]}\n"
                                                           f"–†–µ–π—Ç–∏–Ω–≥: {doctor[msg][10]}\n"
                                                           f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {specialization[0][3]}\n"
                                                           f"–¶–µ–Ω–∞: {specialization[0][4]}\n")
    else:
        text=f"–ò–º—è: {doctor[msg][2]}\n"f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {doctor[msg][7]}\n"f"–°—Ç–∞–∂: {doctor[msg][11]}\n"f"–†–µ–π—Ç–∏–Ω–≥: {doctor[msg][10]}\n"
        for specialization in specialization:
            text += f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialization[3]}\n"
            text += f"–¶–µ–Ω–∞: {specialization[4]}\n\n"
            
        bot.send_message(message.chat.id, text=text, reply_markup=None)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    print(call.from_user.id)
    bot.answer_callback_query(call.id)
    if call.data == "doctor":
        doc_reg(message=call.message, user_id=call.from_user.id)
    elif call.data == "patient":
        pat_reg(message=call.message, call=call)
    elif call.data == "doc_verification":
        print(1)
        doc_verification(message=call.message, call=call)
    elif call.data == "doc_spec":
        print(2)
        get_doc_spec(message=call.message, call=call)
    elif call.data in ["therapist", "family_doctor", "pediatrician", "cardiologist", "gastroenterologist",
                     "endocrinologist", "neurologist", "allergist_immunologist", "dermatologist",
                     "psychotherapist", "gynecologist", "ophthalmologist", "dentist", "psychiatrist"]:
        conn, cursor = connect_db()
        cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchall()
        specialization = [spec[0] for spec in specialization]
        if call.data in specialization:
            cursor.execute('''DELETE FROM specialisation WHERE user_id = ? AND name = ?''', (call.from_user.id, call.data))
            conn.commit()
        else:
            cursor.execute('''INSERT INTO specialisation (user_id, name, price) VALUES (?, ?, ?)''', (call.from_user.id, call.data, 0))
            conn.commit()
        get_doc_spec(message=call.message, call=call)
    elif call.data == "done":
        get_price(message=call.message, call=call)
    elif call.data == "doc_chats":
        pass
    elif call.data == "edit_profile":
        edit_profile(message=call.message, call=call)
    elif call.data == "doc_reg":
        doc_list(message=call.message, call=call)
    elif call.data in ["therapist_doc", "family_doctor_doc", "pediatrician_doc", "cardiologist_doc", "gastroenterologist_doc",
                     "endocrinologist_doc", "neurologist_doc", "allergist_immunologist_doc", "dermatologist_doc",
                     "psychotherapist_doc", "gynecologist_doc", "ophthalmologist_doc", "dentist_doc", "psychiatrist_doc"]:
        spec = call.data.replace("_doc", "")
        print(spec)
        conn, cursor = connect_db()
        cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchone() 
        print('spec1',specialization)  
        conn.commit()
        cursor.execute('''UPDATE patients SET spec = ? WHERE user_id = ?''', (spec, call.from_user.id))
        conn.commit()
        filters = 10
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort1":
        filters = 10
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort2":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort3":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
        




bot.polling(none_stop=True)