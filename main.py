import telebot
import sqlite3
#import qrcode
#import cloudpayments
from telebot import types
import random
import json
import os
import base64
import requests
import datetime
from datetime import datetime, timedelta
import time

TOKEN = "8156778620:AAGDqv6M3xzOH75owFRtTGU59EPaz_Mz0II"
#CLOUDPAYMENTS_PUBLIC_ID = "YOUR_PUBLIC_ID"
#CLOUDPAYMENTS_SECRET = "YOUR_SECRET_KEY"
bot = telebot.TeleBot(TOKEN)
ADMIN_ID = 2146048678  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#ADMIN_ID = (935727305, 2107643694)
def connect_db():
    conn = sqlite3.connect("db.db", check_same_thread=False)
    cursor = conn.cursor()
    return conn, cursor


@bot.message_handler(commands=['start'])
def start(message):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
    patient = cursor.fetchone()
    print(doctor)
    print(message.from_user.id)
    if doctor:
        profile_doc(message, call=message)
    elif patient:
        profile_pat(message, call=message)
    else:
        marcup = types.InlineKeyboardMarkup(row_width=2)
        doc = types.InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –Ø –¥–æ–∫—Ç–æ—Ä", callback_data="doctor")
        pat = types.InlineKeyboardButton(text="üßë‚Äçüíº –Ø –ø–∞—Ü–∏–µ–Ω—Ç", callback_data="patient")
        marcup.add(doc, pat)
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Äî –ù–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Äî –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ñ–∞–π–ª–∞–º–∏\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=marcup)
    cursor.execute('''SELECT * FROM patients''')
    patients = cursor.fetchall()
    print('patients', patients)


user_data = {}
def doc_reg(message, user_id):
    user_data[user_id] = {}
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—Å.")
    bot.register_next_step_handler(message, get_doc_name)

def get_doc_name(message):
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(message, get_doc_phone)
def get_doc_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(message, get_doc_email)
def get_doc_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id, f"üéâ –î–æ–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"üë§ –ò–º—è: {user_data[message.from_user.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.from_user.id]['phone']}\n"
        f"‚úâÔ∏è Email: {user_data[message.from_user.id]['email']}\n\n"
        "‚úÖ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."
    )
    conn, cursor = connect_db()
    cursor.execute('''INSERT INTO doctors (user_id, name, phone, email) VALUES (?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    conn.commit()
    bot.send_message(message.chat.id, 
"üìÇ –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–ø–ª–æ–º–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).\n"
"üë®‚Äç‚öïÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–π–¥–∂ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω¬ª –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."  
)
    print(user_data)
    print(cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,)).fetchall())
    profile_doc(message, call=message)

def pat_reg(message, call):
    bot.send_message(message.chat.id, "üßë‚Äçüíº –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ª–∏—á–Ω–æ.")
    bot.register_next_step_handler(message, get_pat_name)
def get_pat_name(message):
    user_data[message.from_user.id] = {}
    user_data[message.from_user.id]['name'] = message.text
    bot.send_message(message.chat.id, "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "‚ùóÔ∏è –ú—ã –Ω–µ –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.")
    bot.register_next_step_handler(message, get_pat_phone)
def get_pat_phone(message):
    user_data[message.from_user.id]['phone'] = message.text
    bot.send_message(message.chat.id, "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    bot.register_next_step_handler(message, get_pat_email)
def get_pat_email(message):
    user_data[message.from_user.id]['email'] = message.text
    bot.send_message(message.chat.id,  f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –ò–º—è: {user_data[message.from_user.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.from_user.id]['phone']}\n"
        f"‚úâÔ∏è Email: {user_data[message.from_user.id]['email']}\n\n"
        "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!"
    )
    con, cursor = connect_db()
    cursor.execute('''INSERT INTO patients (user_id, name, phone, email) VALUES (?, ?, ?, ?)''', (
        message.from_user.id,
        user_data[message.from_user.id]['name'],
        user_data[message.from_user.id]['phone'],
        user_data[message.from_user.id]['email']
    ))
    con.commit()
    profile_pat(message, call=message)

def profile_doc(message, call):
    try:
        id = call.from_user.id
    except AttributeError:
        id = message.from_user.id
    conn, cursor = connect_db()
    cursor.execute('''SELECT verification_status, balance FROM doctors WHERE user_id = ?''', (id,))
    status_balance = cursor.fetchone()
    if not status_balance:
        bot.send_message(id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    status, balance = status_balance

    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="üìë –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="doc_verification")
    specif = types.InlineKeyboardButton(text="ü©∫ –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="doc_spec")
    chats = types.InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã", callback_data="doc_chats")
    edit = types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")

    if status == 'pending':
        marcup.add(doc, specif, edit)
    elif status == 'verified':
        marcup.add(specif, chats, edit)
    elif status == 'rejected':
        marcup.add(doc, edit)

    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (id,))
    doctor = cursor.fetchone()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    specialization_str = ', '.join(specialization) if specialization else "–ù–µ –≤—ã–±—Ä–∞–Ω—ã"

    # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if doctor[8] == 'pending':
        verif_text = "‚è≥ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    elif doctor[8] == 'verified':
        verif_text = "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤!"
    elif doctor[8] == 'rejected':
        verif_text = "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    else:
        verif_text = "–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    profile_text = (
        "üë®‚Äç‚öïÔ∏è *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞*\n\n"
        f"üë§ –ò–º—è: {doctor[2]}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {doctor[4]}\n"
        f"‚úâÔ∏è Email: {doctor[5]}\n"
        f"üíº –°—Ç–∞—Ç—É—Å: {verif_text}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {doctor[10]} —Ä—É–±.\n"
        f"ü©∫ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {specialization_str}\n"
    )

    bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")

#–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è

def doc_verification(message, call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            "üìÇ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–ø–ª–æ–º–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).\n\n"
            "‚ùóÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ–π–¥–∂ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω¬ª –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
    )
    bot.register_next_step_handler(message, get_doc_verification)

def get_doc_verification(message):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = f'verification_docs/{message.from_user.id}.jpg'
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn, cursor = connect_db()
        cursor.execute(
            '''UPDATE doctors SET verification_status = ?, verification_docs = ? WHERE user_id = ?''',
            ('pending', src, message.from_user.id)
        )
        conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
            "‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤. "
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏–ª–∏ –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
        )
        bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}."
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, get_doc_verification)

def get_doc_spec(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]

    marcup = types.InlineKeyboardMarkup(row_width=3)  # <-- row_width=3 –¥–ª—è —Ç—Ä—ë—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    spec_buttons = [
        ("therapist", "–¢–µ—Ä–∞–ø–µ–≤—Ç"),
        ("family", "–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á"),
        ("pediatrician", "–ü–µ–¥–∏–∞—Ç—Ä"),
        ("cardiologist", "–ö–∞—Ä–¥–∏–æ–ª–æ–≥"),
        ("gastroenterologist", "–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥"),
        ("endocrinologist", "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥"),
        ("neurologist", "–ù–µ–≤—Ä–æ–ª–æ–≥"),
        ("allergist_immunologist", "–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥"),
        ("dermatologist", "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥"),
        ("psychotherapist", "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç"),
        ("gynecologist", "–ì–∏–Ω–µ–∫–æ–ª–æ–≥"),
        ("ophthalmologist", "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥"),
        ("dentist", "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥"),
        ("psychiatrist", "–ü—Å–∏—Ö–∏–∞—Ç—Ä"),
    ]
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for code, label in spec_buttons:
        text = f"‚úÖ {label}" if code in specialization else label
        row.append(types.InlineKeyboardButton(text=text, callback_data=code))
        if len(row) == 3:
            marcup.add(*row)
            row = []
    if row:
        marcup.add(*row)
    done = types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")
    marcup.add(done)

    help_text = (
        "ü©∫ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≥–æ—Ç–æ–≤—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–º–µ—á–µ–Ω—ã –≥–∞–ª–æ—á–∫–æ–π.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=help_text,
        reply_markup=marcup,
        parse_mode="Markdown"
    )

def get_price(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    special = []
    for spec in specialization:
        if spec == 'therapist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–¢–µ—Ä–∞–ø–µ–≤—Ç', call.from_user.id, spec))
        elif spec == 'family':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á', call.from_user.id, spec))
        elif spec == 'pediatrician':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü–µ–¥–∏–∞—Ç—Ä', call.from_user.id, spec))
        elif spec == 'cardiologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ö–∞—Ä–¥–∏–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'gastroenterologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'endocrinologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'neurologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ù–µ–≤—Ä–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'allergist_immunologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'dermatologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'psychotherapist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç', call.from_user.id, spec))
        elif spec == 'gynecologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ì–∏–Ω–µ–∫–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'ophthalmologist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'dentist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', call.from_user.id, spec))
        elif spec == 'psychiatrist':
            cursor.execute('''UPDATE specialisation SET name_ru = ? WHERE user_id = ? AND name = ?''', ('–ü—Å–∏—Ö–∏–∞—Ç—Ä', call.from_user.id, spec))
        conn.commit()
    cursor.execute('''SELECT name_ru FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
    specialization = cursor.fetchall()
    print(specialization)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    specialization = [spec[0] for spec in specialization]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    specialization = ', '.join(specialization)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {specialization}", reply_markup=None)
    get_price_value(message=message)
def get_price_value(message):
    bot.send_message(
        message.chat.id,
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000,2000,3000\n"
        "–ü–æ—Ä—è–¥–æ–∫ —Ü–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π."
    )
    bot.register_next_step_handler(message, get_price_value_2)

def get_price_value_2(message):
    prices = message.text.split(',')
    conn, cursor = connect_db()
    cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (message.from_user.id,))
    specialization = cursor.fetchall()
    specialization = [spec[0] for spec in specialization]
    try:
        for i in range(len(specialization)):
            cursor.execute(
                '''UPDATE specialisation SET price = ? WHERE user_id = ? AND name = ?''',
                (prices[i], message.from_user.id, specialization[i])
            )
            conn.commit()
        bot.send_message(
            message.chat.id,
            "‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
        pr = cursor.execute('''SELECT name, price FROM specialisation WHERE user_id = ?''', (message.from_user.id,)).fetchall()
        print(pr)
        profile_doc(message, call=message)
    except IndexError:
        bot.send_message(
            message.chat.id,
            "‚ùóÔ∏è –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
        get_price_value(message)
    

def edit_profile(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=2)
    name = types.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="name")
    phone = types.InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="phone")
    email = types.InlineKeyboardButton(text="‚úâÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="email")
    discription = types.InlineKeyboardButton(text="‚ÑπÔ∏è –ò–∑–º./–¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="description")
    marcup.add(name, phone)
    marcup.add(email, discription)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            "üîß *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å. –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å."
        ),
        reply_markup=marcup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data in ["name", "phone", "email", "description"])
def edit_profile1(call):
    bot.answer_callback_query(call.id)
    if call.data == "name":
        bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å –≤–∏–¥–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã."
        )
        bot.register_next_step_handler(call.message, get_new_name)
    elif call.data == "phone":
        bot.send_message(
            call.message.chat.id,
            "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –∞–∫—Ç—É–∞–ª–µ–Ω ‚Äî –Ω–∞ –Ω–µ–≥–æ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        bot.register_next_step_handler(call.message, get_new_phone)
    elif call.data == "email":
        bot.send_message(
            call.message.chat.id,
            "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞."
        )
        bot.register_next_step_handler(call.message, get_new_email)
    elif call.data == "description":
        bot.send_message(
            call.message.chat.id,
            "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –æ–ø—ã—Ç–µ –∏ –ø–æ–¥—Ö–æ–¥–µ –∫ —Ä–∞–±–æ—Ç–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—Å."
        )
        bot.register_next_step_handler(call.message, get_new_description)

def get_new_name(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET name = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message)

def get_new_phone(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET phone = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message)

def get_new_email(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET email = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message)

def get_new_description(message):
    conn, cursor = connect_db()
    cursor.execute('''UPDATE doctors SET description = ? WHERE user_id = ?''', (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(
        message.chat.id,
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω."
    )
    profile_doc(message)

def profile_pat(message, call):
    try:
        id = call.from_user.id
    except AttributeError:
        id = message.from_user.id
    marcup = types.InlineKeyboardMarkup(row_width=2)
    doc = types.InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", callback_data="doc_reg")
    chats = types.InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã", callback_data="pat_chats")
    marcup.add(doc, chats)
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (id,))
    patient = cursor.fetchone()
    if patient:
        profile_text = (
            "üßë‚Äçüíº *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n\n"
            f"üë§ –ò–º—è: {patient[2]}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient[4]}\n"
            f"‚úâÔ∏è Email: {patient[5]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        bot.send_message(id, text=profile_text, reply_markup=marcup, parse_mode="Markdown")

def doc_list(message, call):
    marcup = types.InlineKeyboardMarkup(row_width=3)
    spec1 = types.InlineKeyboardButton(text="–¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="therapist_doc")
    spec2 = types.InlineKeyboardButton(text="–°–µ–º–µ–π–Ω—ã–π –≤—Ä–∞—á", callback_data="family_doc")
    spec3 = types.InlineKeyboardButton(text="–ü–µ–¥–∏–∞—Ç—Ä", callback_data="pediatrician_doc")
    spec4 = types.InlineKeyboardButton(text="–ö–∞—Ä–¥–∏–æ–ª–æ–≥", callback_data="cardiologist_doc")
    spec5 = types.InlineKeyboardButton(text="–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥", callback_data="gastroenterologist_doc")
    spec6 = types.InlineKeyboardButton(text="–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥", callback_data="endocrinologist_doc")
    spec7 = types.InlineKeyboardButton(text="–ù–µ–≤—Ä–æ–ª–æ–≥", callback_data="neurologist_doc")
    spec8 = types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–æ–ª–æ–≥-–∏–º–º—É–Ω–æ–ª–æ–≥", callback_data="allergist_immunologist_doc")
    spec9 = types.InlineKeyboardButton(text="–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", callback_data="dermatologist_doc")
    spec10 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", callback_data="psychotherapist_doc")
    spec11 = types.InlineKeyboardButton(text="–ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="gynecologist_doc")
    spec12 = types.InlineKeyboardButton(text="–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", callback_data="ophthalmologist_doc")
    spec13 = types.InlineKeyboardButton(text="–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="dentist_doc")
    spec14 = types.InlineKeyboardButton(text="–ü—Å–∏—Ö–∏–∞—Ç—Ä", callback_data="psychiatrist_doc")
    marcup.add(spec1, spec2, spec3, spec4, spec5, spec6, spec7, spec8, spec9, spec10, spec11, spec12, spec13, spec14)
    bot.edit_message_text(
    chat_id=call.message.chat.id,
    message_id=call.message.message_id,
    text=(
        "ü©∫ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. "
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    ),
    reply_markup=marcup,
    parse_mode="Markdown"
)

def get_doc(message, call, filters, flag, msg, id):
    doctor = []
    conn, cursor = connect_db()
    spec = cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,)).fetchone()
    print(spec)
    cursor.execute('''SELECT user_id FROM specialisation WHERE name = ?''', (spec))
    doctors_ids = cursor.fetchall()
    
    print(spec)
    print(doctors_ids)
    doctors_ids = [doctor[0] for doctor in doctors_ids]
    print(doctors_ids)
    cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (id,))
    filters = cursor.fetchone()
    filters= int(filters[0])
    print('filters', filters)
    if doctors_ids:
        for doctor_id in doctors_ids:
            print(doctor_id)
            cursor.execute('''SELECT * FROM doctors WHERE user_id = ? AND verification_status = ?''', (doctor_id, 'verified'))
            doctor += cursor.fetchall()
        print(doctor)
        doctor = sorted(doctor, key=lambda x: x[filters], reverse=True)
        print(doctor)
        print(len(doctor))
    if flag:
        doc_card(message, call, doctor, msg)
        flag = False
    else:
        doctors(message, call, doctor)

def doctors(message, call, doctor):
    conn, cursor = connect_db()
    if len(doctor) == 0:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –í—Ä–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.")
    else:
        marcup = types.InlineKeyboardMarkup(row_width=3)
        sort1 = types.InlineKeyboardButton(text="‚≠êÔ∏è –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="sort1")
        sort2 = types.InlineKeyboardButton(text="üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="sort2")
        sort3 = types.InlineKeyboardButton(text="üéì –ü–æ –æ–ø—ã—Ç—É", callback_data="sort3")
        back = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="doc_reg")
        marcup.add(sort1, sort2, sort3)
        marcup.add(back)
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text = "üë®‚Äç‚öïÔ∏è *–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π*\n\n"
        for idx, doc in enumerate(doctor, 1):
            text += (
                f"*{idx}. {doc[2]}*\n"
                f"‚Äî üèÖ –†–µ–π—Ç–∏–Ω–≥: {doc[10]}\n"
                f"‚Äî üéì –°—Ç–∞–∂: {doc[11]} –ª–µ—Ç\n"
                f"‚Äî üí¨ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=marcup,
            parse_mode="Markdown"
        )


def doc_card(message, call, doctor, msg):
    msg = int(msg) - 1
    conn, cursor = connect_db()
    doc_info = doctor[msg]
    cursor.execute('''SELECT * FROM specialisation WHERE user_id = ?''', (doc_info[1],))
    specializations = cursor.fetchall()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    back = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="doc_reg")
    consult = types.InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"consult_{doc_info[1]}")
    marcup.add(consult, back)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    spec_text = ""
    for spec in specializations:
        spec_text += f"ü©∫ {spec[3]}\nüí∞ –¶–µ–Ω–∞: {spec[4]} —Ä—É–±.\n\n"

    card_text = (
        f"üë®‚Äç‚öïÔ∏è *–ü—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞*\n\n"
        f"üë§ –ò–º—è: {doc_info[2]}\n"
        f"üéì –°—Ç–∞–∂: {doc_info[11]} –ª–µ—Ç\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {doc_info[10]}\n"
        f"{spec_text}"
        f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ: –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤—Ä–∞—á—É."
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if doc_info[3]:
        try:
            with open(doc_info[3], 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=card_text, reply_markup=marcup, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, text=card_text, reply_markup=marcup, parse_mode="Markdown")
    

def get_consultation_date(message):
    id_consult = random.randint(100000, 999999)
    marcup = types.InlineKeyboardMarkup(row_width=2)
    approve = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve{id_consult}")
    cancel = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel{id_consult}")
    marcup.add(approve, cancel)
    conn, cursor = connect_db()
    cursor.execute('''SELECT data FROM temporary_data WHERE user_id = ?''', (message.from_user.id,))
    doctor_id = cursor.fetchone()
    if doctor_id:
        doctor_id = doctor_id[0]
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doctor_id,))
        doctor = cursor.fetchone()
        if doctor:
            bot.send_message(
                message.chat.id,
                f"üìù –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –≤—Ä–∞—á—É *{doctor[2]}*.\n"
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ä–∞—á–∞. "
                "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª."
            )
            bot.send_message(
                doctor_id,
                f"üë®‚Äç‚öïÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
                f"–ü–∞—Ü–∏–µ–Ω—Ç: {message.from_user.id}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                reply_markup=marcup
            )
            total_price = cursor.execute('''SELECT price FROM specialisation WHERE user_id = ?''', (doctor_id,)).fetchone()
            total_price = total_price[0]
            cursor.execute(
                '''INSERT INTO consultations (identifier, doctor_id, patient_id, description, total_price) VALUES (?, ?, ?, ?, ?)''',
                (id_consult, doctor_id, message.from_user.id, message.text, total_price)
            )
            conn.commit()
            cursor.execute('''DELETE FROM temporary_data WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
        else:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞.")


import requests
import base64

CLOUDPAYMENTS_PUBLIC_ID = "–í–ê–®_PUBLIC_ID"
CLOUDPAYMENTS_SECRET = "–í–ê–®_SECRET_KEY"
CLOUDPAYMENTS_API_URL = "https://api.cloudpayments.ru/"

def calculate_commission(price, has_subscription=False):
    # –ö–æ–º–∏—Å—Å–∏—è –¥–µ–ª–∏—Ç—Å—è –ø–æ–ø–æ–ª–∞–º –º–µ–∂–¥—É –≤—Ä–∞—á–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
    if has_subscription:
        percent = 0.05
        limit = 150
    else:
        percent = 0.10
        limit = 500
    commission = min(price * percent, limit)
    return commission

def create_cloudpayments_invoice(consultation_id):
    conn, cursor = connect_db()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    cursor.execute('''SELECT patient_id, doctor_id, total_price FROM consultations WHERE identifier = ?''', (consultation_id,))
    row = cursor.fetchone()
    print('row', row)
    if not row:
        return None
    patient_id, doctor_id, price = row
    print('id', patient_id)
    # –ü–æ–ª—É—á–∞–µ–º email –ø–∞—Ü–∏–µ–Ω—Ç–∞
    cursor.execute('''SELECT email FROM patients WHERE user_id = ?''', (patient_id,))
    patient_email = cursor.fetchone()
    print('patient_email', patient_email)

    # –ü–æ–ª—É—á–∞–µ–º email –≤—Ä–∞—á–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # cursor.execute('''SELECT email FROM doctors WHERE id = ?''', (doctor_id,))
    # doctor_email = cursor.fetchone()[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ subscription)
    # cursor.execute('''SELECT subscription FROM patients WHERE id = ?''', (patient_id,))
    # has_subscription = cursor.fetchone()[0] == 1
    has_subscription = False  # –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ False

    commission = calculate_commission(price, has_subscription)
    total_for_patient = price + commission / 2  # –ü–∞—Ü–∏–µ–Ω—Ç –ø–ª–∞—Ç–∏—Ç –ø–æ–ª–æ–≤–∏–Ω—É –∫–æ–º–∏—Å—Å–∏–∏ —Å–≤–µ—Ä—Ö—É

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ CloudPayments
    url = CLOUDPAYMENTS_API_URL + "payments/charge"
    headers = {
        "Authorization": "Basic " + base64.b64encode(f"{CLOUDPAYMENTS_PUBLIC_ID}:{CLOUDPAYMENTS_SECRET}".encode()).decode()
    }
    data = {
        "Amount": total_for_patient,
        "Currency": "RUB",
        "Description": f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}",
        "InvoiceId": consultation_id,
        "AccountId": patient_email,
        "Email": patient_email
    }
    response = requests.post(url, json=data, headers=headers)
    return response.json()

def send_invoice_to_patient(consultation_id, chat_id):
    invoice = create_cloudpayments_invoice(consultation_id)
    if invoice and invoice.get("Success"):
        payment_url = invoice["Model"].get("Url", "https://pay.cloudpayments.ru/")
        bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}")
        # –í –±–∞–∑–µ: payment_status = 'pending_payment'
        conn, cursor = connect_db()
        cursor.execute('''UPDATE consultations SET payment_status = ? WHERE identifier = ?''', ('pending_payment', consultation_id))
        conn.commit()
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_chat(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (call.data.replace("approve", ""),))
    consultation = cursor.fetchone()
    if consultation:
        cursor.execute('''INSERT INTO chats (consultation_id, doctor_id, patient_id) VALUES (?, ?, ?)''', (consultation[1], consultation[3], consultation[2]))
        conn.commit()
        bot.send_message(consultation[2], "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω.")
        bot.send_message(consultation[3], "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    else:
        bot.send_message(call.message.id, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

def chats(message, call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM chats WHERE doctor_id = ? OR patient_id = ?''', (call.from_user.id, call.from_user.id))
    chats = cursor.fetchall()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    for chat in chats:
        chat_id = chat[0]
        consultation_id = chat[1]
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (consultation_id,))
        consultation = cursor.fetchone()
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (consultation[3],))
        doctor = cursor.fetchone()
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (consultation[2],))
        patient = cursor.fetchone()
        print('chat', chat)
        print('consultation', consultation)
        print('doctor', doctor)
        print('patient', patient)
        if consultation:
            chat_button = types.InlineKeyboardButton(text=f"–ß–∞—Ç —Å {patient[2] if call.data == "doc_chats" else doctor[2]}", callback_data=f"chat_{chat[1]}_1" if call.data == "doc_chats" else f"chat_{chat[1]}_2")
            marcup.add(chat_button)
    back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{'back_doc'if call.data == "doc_chats" else "back_pat"}")
    marcup.add(back)
    print('chats', chats)
    #–≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    if len(chats) == 0:
        bot.send_message(message.chat.id, "üí¨ –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö. –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à —á–∞—Ç.")
    else:
        text = "üí¨ *–í–∞—à–∏ —á–∞—Ç—ã*\n\n"
    for chat in chats:
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (chat[1],))
        consultation = cursor.fetchone()
        if consultation:
            text += f"üóÇ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {consultation[1]}\n"
            text += f"üßë‚Äçüíº –ü–∞—Ü–∏–µ–Ω—Ç: {patient[2]}\n"
            text += f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor[2]}\n\n"
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=marcup,
            parse_mode="Markdown"
        )
    except Exception as e:
        pass

def start_chat(call, chat_id_end):
    marcup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    text = types.KeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    img = types.KeyboardButton(text="üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    video = types.KeyboardButton(text="üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
    audio = types.KeyboardButton(text="üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ")
    end_consult = types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    back = types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if chat_id_end:
        marcup.add(text, img, video, audio, end_consult, back)
    else:
        spor = types.KeyboardButton(text="‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
        marcup.add(text, img, video, audio, end_consult, spor, back)
    bot.send_message(
        call.message.chat.id,
        "üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:*\n\n"
        "‚Äî üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Äî üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Äî üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ\n"
        "‚Äî üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Äî ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "‚Äî ‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ—Ä–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)\n"
        "‚Äî ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=marcup,
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == ADMIN_ID:
        markup = types.InlineKeyboardMarkup(row_width=2)
        veri = types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data="doc_ver_admin")
        spor = types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", callback_data="dispute_consultation")
        markup.add(veri, spor)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=markup)

@bot.message_handler(content_types=['text', 'photo', 'video', 'audio'])
def handle_message(message):
    if message.text == "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, send_text_message)
    elif message.text == "üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, send_photo_message)
    elif message.text == "üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, send_video_message)
    elif message.text == "üé§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ-—Å–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, send_vocie_message)
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        pass
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        patient = cursor.fetchone()
        if patient:
            cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
            active_chat_id = cursor.fetchone()
        else:
            cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
            active_chat_id = cursor.fetchone()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id[0],))
        chats = cursor.fetchall()
        chats = chats[0]
        print('chats', chats)
        
        if chats[2] == message.from_user.id:
            cursor.execute('''UPDATE patients SET active_chat_id = NULL WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
            print('patients', chats[2])
        elif chats[3] == message.from_user.id:
            cursor.execute('''UPDATE doctors SET active_chat_id = NULL WHERE user_id = ?''', (message.from_user.id,))
            conn.commit()
            print('doctors', chats[3])
        start(message)
    elif message.text == "‚ö†Ô∏è –û—Å–ø–æ—Ä–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞:")
        bot.register_next_step_handler(message, dispute_consultation)
    else:
        try:
            msg = message.text
            flag= True
            conn, cursor = connect_db()
            cursor.execute('''SELECT filter FROM patients WHERE user_id = ?''', (message.from_user.id,))
            filters = cursor.fetchone()
            get_doc(message, message, filters=filters, flag=flag, msg=msg, id=message.from_user.id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def dispute_consultation(message):
    message_text = message.text
    conn, cursor = connect_db()
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id))
    chat = cursor.fetchone()
    marcup = types.InlineKeyboardMarkup(row_width=2)
    view_chat = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç", callback_data=f"view_chat_{chat[1]}")
    marcup.add(view_chat)
    bot.send_message(ADMIN_ID, f"–ü–∞—Ü–∏–µ–Ω—Ç {message.from_user.id} –æ—Å–ø–æ—Ä–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–ü—Ä–∏—á–∏–Ω–∞: {message_text}\n–ß–∞—Ç: {chat[1]}", reply_markup=marcup)

def send_text_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    print('message', message.from_user.id)
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    print('row', row)
    if row[0] != None:
        messages = json.loads(row[0])
    else:
        messages = []
    
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            bot.send_message(chat[2], text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.text}')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–∞—á—É
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.text)
            messages.append({
                "sender": "patient",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            bot.send_message(chat[3], text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.text}')
            messages.append({
                "sender": "doctor",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            bot.send_message(chat[2], text = f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.text}')
            messages.append({
                "sender": "patient",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            bot.send_message(chat[3], text = f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.text}')
            messages.append({
                "sender": "doctor",
                "text": message.text,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_photo_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[2], photo=message.photo[-1].file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.photo[-1].file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[3], photo=message.photo[-1].file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[2], photo=message.photo[-1].file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/photos/{message.photo[-1].file_id}.jpg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_photo(chat[3], photo=message.photo[-1].file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "photo": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_video_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[2], video=message.video.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.video.file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[3], video=message.video.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[2], video=message.video.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.video.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/videos/{message.video.file_id}.mp4"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_video(chat[3], video=message.video.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "video": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def send_vocie_message(message):
    conn, cursor = connect_db()
    pac_dont_chat = 1
    doc_dont_chat = 1
    try: 
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (message.from_user.id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        active_chat_id = data_pac[8]
        name = data_pac[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        doc_id = chat[2]
        print('doc_id', doc_id)
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        if data_doc[12] == None:
            doc_dont_chat = 0
    
    except TypeError:
        cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        data_doc = cursor.fetchone()
        print('data_doc', data_doc)
        active_chat_id = data_doc[12]
        print('active_chat_id', active_chat_id)
        name = data_doc[2]
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        pac_id = chat[3]
        cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (pac_id,))
        data_pac = cursor.fetchone()
        print('data_pac', data_pac)
        if data_pac[8] == None:
            pac_dont_chat = 0
    print('name', name)
    
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
        pac_dont_chat = 0
        if active_chat_id == None:
            doc_dont_chat = 0
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    #active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT active_chat_id FROM patients WHERE user_id = ?''', (message.from_user.id,))
    active_chat_id = cursor.fetchone()
    if active_chat_id == None:
        cursor.execute('''SELECT active_chat_id FROM doctors WHERE user_id = ?''', (message.from_user.id,))
        active_chat_id = cursor.fetchone()
    print('active_chat_id', active_chat_id)
    if active_chat_id == None:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    active_chat_id = active_chat_id[0]
    cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    chat = cursor.fetchone()
    print('chat', chat)
    cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (active_chat_id,))
    row = cursor.fetchone()
    print('row', row)
    if row:
        messages = json.loads(row[0])
    else:
        messages = []
    if chat:
        if chat[3] == message.from_user.id and pac_dont_chat:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[2], voice=message.voice.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', message.voice.file_id)
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id and doc_dont_chat:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[3], voice=message.voice.file_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[3] == message.from_user.id:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[2], voice=message.voice.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "patient",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        elif chat[2] == message.from_user.id:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            local_path = f"media/voices/{message.voice.file_id}.ogg"
            with open(local_path, 'wb') as f:
                f.write(downloaded_file)
            bot.send_voice(chat[3], voice=message.voice.file_id, caption=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞ {name}\n {message.caption or ""}')
            messages.append({
                "sender": "doctor",
                "text": message.caption or "",
                "voice": local_path,
                "timestamp": datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            })
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ json –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        messages_json = json.dumps(messages, ensure_ascii=False)
        cursor.execute('''UPDATE chats SET messages = ? WHERE consultation_id = ?''', (messages_json, active_chat_id))
        conn.commit()
        print('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', messages_json)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")



def doc_ver_admin(call):
    conn, cursor = connect_db()
    cursor.execute('''SELECT * FROM doctors WHERE verification_status = ?''', ('pending',))
    data = cursor.fetchall()
    if not data:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
        return
    for row in data:
        print('row', row)
        markup = types.InlineKeyboardMarkup(row_width=2)
        check = types.InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {row[2]}", callback_data=f"check_{row[1]}")
        markup.add(check)
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_"))
def check_doc(call):
    conn, cursor = connect_db()
    doc_id = call.data.split("_")[1]
    cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (doc_id,))
    data = cursor.fetchone()
    if not data:
        bot.send_message(call.message.chat.id, "–î–æ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = types.InlineKeyboardMarkup(row_width=2)
    approve = types.InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"accept_{doc_id}")
    reject = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{doc_id}")
    markup.add(approve, reject)
    with open(data[7], 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo=photo, caption=f"–î–æ–∫—Ç–æ—Ä: {data[2]}", reply_markup=markup)
    


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    conn, cursor = connect_db()
    id_consult = cursor.execute('''SELECT identifier FROM consultations WHERE doctor_id = ?''', (call.from_user.id,)).fetchall()
    print('id', id_consult)
    print(call.from_user.id)
    bot.answer_callback_query(call.id)
    if call.data == "doctor":
        doc_reg(message=call.message, user_id=call.from_user.id)
    elif call.data == "patient":
        pat_reg(message=call.message, call=call)
    elif call.data == "doc_verification":
        print(1)
        doc_verification(message=call.message, call=call)
    elif call.data == "doc_spec":
        print(2)
        get_doc_spec(message=call.message, call=call)
    elif call.data in ["therapist", "family", "pediatrician", "cardiologist", "gastroenterologist",
                     "endocrinologist", "neurologist", "allergist_immunologist", "dermatologist",
                     "psychotherapist", "gynecologist", "ophthalmologist", "dentist", "psychiatrist"]:
        conn, cursor = connect_db()
        cursor.execute('''SELECT name FROM specialisation WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchall()
        specialization = [spec[0] for spec in specialization]
        if call.data in specialization:
            cursor.execute('''DELETE FROM specialisation WHERE user_id = ? AND name = ?''', (call.from_user.id, call.data))
            conn.commit()
        else:
            cursor.execute('''INSERT INTO specialisation (user_id, name, price) VALUES (?, ?, ?)''', (call.from_user.id, call.data, 0))
            conn.commit()
        get_doc_spec(message=call.message, call=call)
    elif call.data == "done":
        get_price(message=call.message, call=call)
    elif call.data == "edit_profile":
        edit_profile(message=call.message, call=call)
    elif call.data == "doc_reg":
        doc_list(message=call.message, call=call)
    elif call.data in ["therapist_doc", "family_doc", "pediatrician_doc", "cardiologist_doc", "gastroenterologist_doc",
                     "endocrinologist_doc", "neurologist_doc", "allergist_immunologist_doc", "dermatologist_doc",
                     "psychotherapist_doc", "gynecologist_doc", "ophthalmologist_doc", "dentist_doc", "psychiatrist_doc"]:
        spec = call.data.replace("_doc", "")
        print(spec)
        conn, cursor = connect_db()
        cursor.execute('''SELECT spec FROM patients WHERE user_id = ?''', (call.from_user.id,))
        specialization = cursor.fetchone() 
        print('spec1',specialization)  
        conn.commit()
        cursor.execute('''UPDATE patients SET spec = ? WHERE user_id = ?''', (spec, call.from_user.id))
        conn.commit()
        filters = 10
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort1":
        filters = 10
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort2":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data == "sort3":
        filters = 11
        conn, cursor = connect_db()
        cursor.execute('''UPDATE patients SET filter = ? WHERE user_id = ?''', (filters, call.from_user.id))
        conn.commit()
        get_doc(message=call.message, call=call, filters=filters, flag=False, msg=None, id=call.from_user.id)
    elif call.data.startswith("consult_"):
        id = call.data.replace("consult_", "")
        conn, cursor = connect_db()
        cursor.execute('''INSERT INTO temporary_data (user_id, data) VALUES (?, ?)''', (call.from_user.id, id))
        conn.commit()
        bot.send_message(
        call.message.chat.id,
    "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n"
    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—Ä–∞—á—É –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ë–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å –≤ –≥–æ—Ä–ª–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–∂–µ 3 –¥–Ω—è...¬ª"
)
        bot.register_next_step_handler(call.message, get_consultation_date)
    elif call.data.startswith("approve"):
        id_consult = call.data.replace("approve", "")
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (id_consult,))
        consultation = cursor.fetchone()
        if consultation:
            #–Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã.
            bot.send_message(
        consultation[3],
    "‚úÖ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è."
)
            bot.send_message(
    consultation[2],
    "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤—Ä–∞—á–æ–º!\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –≤—Ä–∞—á–æ–º."
)
            #send_invoice_to_patient(id_consult, call.message.chat.id)
            create_chat(message=call.message, call=call)
        else:
            bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif call.data.startswith("cancel"):
        id_consult = call.data.replace("cancel", "")
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (id_consult,))
        consultation = cursor.fetchone()
        if consultation:
            bot.send_message(
                consultation[3],
                "‚ùå –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
)
            bot.send_message(
                consultation[2],
                "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
)
        else:
            bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif call.data.startswith("accept"):
        id = call.data.replace("accept_", "")
        print('id=', id)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET verification_status = ? WHERE user_id = ?''', ('verified', id))
        conn.commit()
        bot.send_message(
    id,
    "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞."
)
        bot.send_message(
    call.message.chat.id,
    "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
    "–î–æ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."
)
        
    elif call.data.startswith("reject"):
        id = call.data.replace("reject_", "")
        print('id=', id)
        conn, cursor = connect_db()
        cursor.execute('''UPDATE doctors SET verification_status = ? WHERE user_id = ?''', ('rejected', id))
        conn.commit()
        bot.send_message(
    id,
    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞.\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)
        bot.send_message(
    call.message.chat.id,
    "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
    "–î–æ–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."
)
    elif call.data == "doc_chats":
        print('doc_chats')
        chats(message=call.message, call=call)
    elif call.data == "pat_chats":
        chats(message=call.message, call=call)
    elif call.data == "back_doc" or call.data == "back_pat":
        if call.data == "back_doc":
            profile_doc(message=call.message, call=call)
        else:
            profile_pat(message=call.message, call=call)
    elif call.data.startswith("chat_"):
        chat_id = call.data.replace("chat_", "")
        print('chat_id', chat_id)
        chat_id_end = chat_id.endswith('_1')
        print('chat_id_end', chat_id_end)
        #—É–±–∏—Ä–∞–µ–º "_1" –∏–ª–∏ "_2" –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if chat_id.endswith("_1") or chat_id.endswith("_2"):
            chat_id = chat_id[:-2]
        print('chat_id', chat_id)
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        if chat:
            cursor.execute('''SELECT * FROM consultations WHERE identifier = ?''', (chat[1],))
            consultation = cursor.fetchone()
            if consultation:
                cursor.execute('''SELECT * FROM doctors WHERE user_id = ?''', (consultation[3],))
                doctor = cursor.fetchone()
                cursor.execute('''SELECT * FROM patients WHERE user_id = ?''', (consultation[2],))
                patient = cursor.fetchone()
                bot.send_message(call.message.chat.id, f"–ß–∞—Ç —Å {doctor[2] if call.data == 'doc_chats' else patient[2]}")
                print('chat_id.end', chat_id.endswith('_1'))
                if chat_id_end:
                    cursor.execute('''UPDATE doctors SET active_chat_id = ? WHERE user_id = ?''', (chat_id, consultation[3]))
                    conn.commit()
                else:
                    cursor.execute('''UPDATE patients SET active_chat_id = ? WHERE user_id = ?''', (chat_id, consultation[2]))
                    conn.commit()
                bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                start_chat(call, chat_id_end)
            else:
                bot.send_message(call.message.chat.id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            bot.send_message(call.message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif call.data.startswith("view_chat_"):
        chat_id = call.data.replace("view_chat_", "")
        print('view_chat_id', chat_id)
        conn, cursor = connect_db()
        cursor.execute('''SELECT * FROM chats WHERE consultation_id = ?''', (chat_id,))
        chat = cursor.fetchone()
        print('chat', chat)
        if chat:
            cursor.execute('''SELECT messages FROM chats WHERE consultation_id = ?''', (chat_id,))
            row = cursor.fetchone()
            if row:
                messages = json.loads(row[0])
                print('messages', messages)
                count_messages = 0
                for message in messages:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                    if count_messages >= 10:
                        time.sleep(1)
                        count_messages = 0
                    count_messages += 1
                    if message['sender'] == 'patient':
                        if 'photo' in message:
                            with open(message['photo'], 'rb') as photo_file:
                                bot.send_photo(call.message.chat.id, photo=photo_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        elif 'video' in message:
                            with open(message['video'], 'rb') as video_file:
                                bot.send_video(call.message.chat.id, video=video_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        elif 'voice' in message:
                            with open(message['voice'], 'rb') as voice_file:
                                bot.send_voice(call.message.chat.id, voice=voice_file, caption=f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                        else:   
                            bot.send_message(call.message.chat.id, f"–ü–∞—Ü–∏–µ–Ω—Ç: {message['text']}")
                    elif message['sender'] == 'doctor':
                        if 'photo' in message:
                            with open(message['photo'], 'rb') as photo_file:
                                bot.send_photo(call.message.chat.id, photo=photo_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        elif 'video' in message:
                            with open(message['video'], 'rb') as video_file:
                                bot.send_video(call.message.chat.id, video=video_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        elif 'voice' in message:
                            with open(message['voice'], 'rb') as voice_file:
                                bot.send_voice(call.message.chat.id, voice=voice_file, caption=f"–í—Ä–∞—á: {message['text']}")
                        else:   
                            bot.send_message(call.message.chat.id, f"–í—Ä–∞—á: {message['text']}")
            else:
                bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif call.data == 'doc_ver_admin':
        doc_ver_admin(call)




bot.polling(none_stop=True)